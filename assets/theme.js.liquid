var MasonryGrid, MasonryVideo, Product, ProductSection, Quickshop,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

window.ThemeEditor = (function(superClass) {
  extend(ThemeEditor, superClass);

  function ThemeEditor() {
    return ThemeEditor.__super__.constructor.apply(this, arguments);
  }

  ThemeEditor.prototype.initialize = function() {
    this.instanceHandlers = {};
    this.instances = {};
    return $(document).on('shopify:section:load', (function(_this) {
      return function(event) {
        return _this._onSectionLoad(event);
      };
    })(this)).on('shopify:section:unload', (function(_this) {
      return function(event) {
        return _this._onSectionUnload(event);
      };
    })(this)).on('shopify:section:select', (function(_this) {
      return function(event) {
        return _this._onSectionSelect(event);
      };
    })(this)).on('shopify:section:deselect', (function(_this) {
      return function(event) {
        return _this._onSectionDeselect(event);
      };
    })(this)).on('shopify:section:reorder', (function(_this) {
      return function(event) {
        return _this._onSectionReorder(event);
      };
    })(this)).on('shopify:block:select', (function(_this) {
      return function(event) {
        return _this._onBlockSelect(event);
      };
    })(this)).on('shopify:block:deselect', (function(_this) {
      return function(event) {
        return _this._onBlockDeselect(event);
      };
    })(this));
  };

  ThemeEditor.prototype._findInstance = function(event) {
    var $container, instance;
    instance = this.instances[event.originalEvent.detail.sectionId];
    if (instance != null) {
      return instance;
    } else {
      $container = $('[data-section-id]', event.target);
      return this._createInstance($container);
    }
  };

  ThemeEditor.prototype._createInstance = function($container, instanceHandler) {
    var data, el, instance, sectionId, sectionType;
    el = $container.parent().get(0);
    data = this._loadData(el);
    sectionType = $container.attr('data-section-type');
    sectionId = $container.attr('data-section-id');
    if (sectionType == null) {
      return;
    }
    instanceHandler = instanceHandler || this.instanceHandlers[sectionType];
    instance = {
      instanceHandler: instanceHandler,
      el: el,
      data: data,
      $container: $container,
      sectionId: sectionId
    };
    this.instances[sectionId] = instance;
    return instance;
  };

  ThemeEditor.prototype._loadData = function(el) {
    var data, dataEl, error;
    dataEl = el.querySelector('[data-section-data]');
    if (!dataEl) {
      return {};
    }
    data = dataEl.getAttribute('data-section-data') || dataEl.innerHTML;
    try {
      return JSON.parse(data);
    } catch (error1) {
      error = error1;
      console.warn("Sections: invalid section data found. " + error.message);
      return {};
    }
  };


  /*
      Action: A section has been added or re-rendered.
      Expected: Re-execute any JavaScript needed for the section to work and
          display properly (as if the page had just been loaded).
   */

  ThemeEditor.prototype._onSectionLoad = function(event) {
    var $container, ref, ref1;
    $container = $('[data-section-id]', event.target);
    if (!$container.length) {
      return;
    }
    return (ref = this._createInstance($container)) != null ? (ref1 = ref.instanceHandler) != null ? typeof ref1.onSectionLoad === "function" ? ref1.onSectionLoad(event) : void 0 : void 0 : void 0;
  };


  /*
      Action: A section has been deleted or is being re-rendered.
      Expected: Clean up any event listeners, variables, etc., so that
          nothing breaks when the page is interacted with and no memory leaks occur.
   */

  ThemeEditor.prototype._onSectionUnload = function(event) {
    var instance, ref;
    instance = this._findInstance(event);
    if (instance != null) {
      if ((ref = instance.instanceHandler) != null) {
        if (typeof ref.onSectionUnload === "function") {
          ref.onSectionUnload(event);
        }
      }
    }
    if (instance) {
      return delete this.instances[instance.sectionId];
    }
  };


  /*
      Action: User has selected the section in the sidebar.
      Expected: Make sure the section is in view and stays
          in view while selected (scrolling happens automatically).
      Example: Could be used to pause a slideshow
   */

  ThemeEditor.prototype._onSectionSelect = function(event) {
    var ref, ref1;
    return (ref = this._findInstance(event)) != null ? (ref1 = ref.instanceHandler) != null ? typeof ref1.onSectionSelect === "function" ? ref1.onSectionSelect(event) : void 0 : void 0 : void 0;
  };


  /*
      Action: User has deselected the section in the sidebar.
      Expected: (None)
      Example: Could be used to restart slideshows that are no longer being interacted with.
   */

  ThemeEditor.prototype._onSectionDeselect = function(event) {
    var ref, ref1;
    return (ref = this._findInstance(event)) != null ? (ref1 = ref.instanceHandler) != null ? typeof ref1.onSectionDeselect === "function" ? ref1.onSectionDeselect(event) : void 0 : void 0 : void 0;
  };


  /*
      Action: User moves section in the sidebar
      Expected: (None)
      Example: Could be used to used to change high level section classes, or fire JS dependent on first section
   */

  ThemeEditor.prototype._onSectionReorder = function(event) {
    var ref, ref1;
    return (ref = this._findInstance(event)) != null ? (ref1 = ref.instanceHandler) != null ? typeof ref1.onSectionReorder === "function" ? ref1.onSectionReorder(event) : void 0 : void 0 : void 0;
  };


  /*
      Action: User has selected the block in the sidebar.
      Expected: Make sure the block is in view and stays
          in view while selected (scrolling happens automatically).
      Example: Can be used to to trigger a slideshow to bring a slide/block into view
   */

  ThemeEditor.prototype._onBlockSelect = function(event) {
    var ref, ref1;
    return (ref = this._findInstance(event)) != null ? (ref1 = ref.instanceHandler) != null ? typeof ref1.onBlockSelect === "function" ? ref1.onBlockSelect(event) : void 0 : void 0 : void 0;
  };


  /*
      Action: User has deselected the block in the sidebar.
      Expected: (None)
      Example: Resume a slideshow
   */

  ThemeEditor.prototype._onBlockDeselect = function(event) {
    var ref, ref1;
    return (ref = this._findInstance(event)) != null ? (ref1 = ref.instanceHandler) != null ? typeof ref1.onBlockDeselect === "function" ? ref1.onBlockDeselect(event) : void 0 : void 0 : void 0;
  };


  /*
      Auto initialisation of a section for the store front
   */

  ThemeEditor.prototype._sectionInit = function(instance) {
    var ref;
    return instance != null ? (ref = instance.instanceHandler) != null ? typeof ref.init === "function" ? ref.init(instance) : void 0 : void 0 : void 0;
  };


  /*
      Registration of a section
          - Takes a string parameter as the first argument which
            matches to `[data-section-type]`
  
       * Example
          @sections = new Sections()
          @sections.register('some-section-type', @someSectionClass)
   */

  ThemeEditor.prototype.register = function(type, instanceHandler) {

    /*
        Storage of a instanceHandler based on the sectionType allows _onSectionLoad
           to connect a new section to it's registered instanceHandler
     */
    this.instanceHandlers[type] = instanceHandler;
    return $("[data-section-type=" + type + "]").each((function(_this) {
      return function(index, container) {
        var $container;
        $container = $(container);
        return _this._sectionInit(_this._createInstance($container, instanceHandler));
      };
    })(this));
  };


  /*
      Public method to retrieve information on an instance based on the
      bubbled `event`
   */

  ThemeEditor.prototype.getInstance = function(event) {
    return this._findInstance(event);
  };

  return ThemeEditor;

})(Backbone.View);

window.ThemeUtils = {
  breakpoints: {
    small: 770,
    medium: 1080,
    large: 1280
  },
  extend: function() {
    var dest, i, k, len, obj, objs, v;
    dest = arguments[0], objs = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    for (i = 0, len = objs.length; i < len; i++) {
      obj = objs[i];
      for (k in obj) {
        v = obj[k];
        dest[k] = v;
      }
    }
    return dest;
  },
  windowWidth: function() {
    return window.innerWidth || $(window).width();
  },
  isLessThanMedium: function() {
    return this.windowWidth() < this.breakpoints.small;
  },
  isLessThanLarge: function() {
    return this.windowWidth() < this.breakpoints.medium;
  },
  isSmall: function() {
    return this.windowWidth() < this.breakpoints.small;
  },
  isMedium: function() {
    return this.windowWidth() >= this.breakpoints.small && this.windowWidth() < this.breakpoints.medium;
  },
  isLarge: function() {
    return this.windowWidth() >= this.breakpoints.medium;
  },
  debounce: function(func, wait, immediate) {
    var timeout;
    timeout = null;
    return function() {
      var args, callNow, context, later;
      context = this;
      args = arguments;
      later = function() {
        timeout = null;
        if (!immediate) {
          func.apply(context, args);
        }
      };
      callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) {
        func.apply(context, args);
      }
    };
  },
  unique: function(array) {
    var i, key, output, ref, results, value;
    output = {};
    for (key = i = 0, ref = array.length; 0 <= ref ? i < ref : i > ref; key = 0 <= ref ? ++i : --i) {
      output[array[key]] = array[key];
    }
    results = [];
    for (key in output) {
      value = output[key];
      results.push(value);
    }
    return results;
  },
  scrollTarget: function($el) {
    if (!($el instanceof jQuery)) {
      $el = $($el);
    }
    return $('html, body').animate({
      scrollTop: $el.offset().top
    }, 500, 'linear');
  },
  inViewport: function(el, direction) {
    var inViewportH, inViewportV, marginLeft, marginRight, rect, style, viewportHeight, viewportWidth;
    if (direction == null) {
      direction = 'both';
    }
    if (typeof jQuery === "function" && el instanceof jQuery) {
      el = el[0];
    }
    rect = el.getBoundingClientRect();
    style = el.currentStyle || window.getComputedStyle(el);
    marginRight = parseInt(style.marginRight) || 0;
    marginLeft = parseInt(style.marginLeft) || 0;
    if (document.documentElement.clientWidth < window.innerWidth) {
      viewportWidth = document.documentElement.clientWidth;
    } else {
      viewportWidth = window.innerWidth;
    }
    if (document.documentElement.clientHeight < window.innerHeight) {
      viewportHeight = document.documentElement.clientHeight;
    } else {
      viewportHeight = window.innerHeight;
    }
    inViewportH = rect.right - marginRight >= 0 && rect.left - marginLeft <= viewportWidth;
    inViewportV = rect.bottom >= 0 && rect.top <= viewportHeight;
    switch (direction) {
      case 'horizontal':
        return inViewportH;
      case 'vertical':
        return inViewportV;
      case 'both':
        return inViewportV && inViewportH;
    }
  },

  /*
      Resize Flickity slider to tallest cell in viewport
   */
  flickityResize: function(flickity) {
    var $viewport, cell, height, heights, i, len, ref;
    $viewport = $(flickity.viewport);
    heights = [];
    ref = flickity.cells;
    for (i = 0, len = ref.length; i < len; i++) {
      cell = ref[i];
      if (this.inViewport(cell.element, 'horizontal')) {
        heights.push($(cell.element).outerHeight(true));
      }
    }
    height = Math.max.apply(null, heights);
    return $viewport.height(height);
  }
};

window.CurrencyView = (function(superClass) {
  extend(CurrencyView, superClass);

  function CurrencyView() {
    return CurrencyView.__super__.constructor.apply(this, arguments);
  }

  CurrencyView.prototype.events = {
    "change [name=currencies]": "switchCurrency",
    "switch-currency": "switchCurrency"
  };

  CurrencyView.prototype.initialize = function() {
    var doubleMoney, i, j, len, len1, money, newCurrency, ref, ref1;
    this.isInitialized = false;
    Currency.format = Theme.currencySwitcherFormat;
    Currency.money_with_currency_format = {};
    Currency.money_with_currency_format[Theme.currency] = Theme.moneyFormatCurrency;
    Currency.money_format = {};
    Currency.money_format[Theme.currency] = Theme.moneyFormat;
    try {
      newCurrency = Currency.cookie.read();
      if (newCurrency && this.$("[name=currencies] option[value=" + newCurrency + "]")) {
        Currency.currentCurrency = newCurrency;
      } else if (Theme.defaultCurrency) {
        Currency.currentCurrency = Theme.defaultCurrency;
        Currency.cookie.write(Theme.defaultCurrency);
      } else {
        Currency.currentCurrency = Theme.currency;
        Currency.cookie.write(Theme.currency);
      }
    } catch (error1) {
      return;
    }
    $("[name=currencies]").val(Currency.currentCurrency);
    ref = $("span.money span.money");
    for (i = 0, len = ref.length; i < len; i++) {
      doubleMoney = ref[i];
      $(doubleMoney).parents("span.money").removeClass("money");
    }
    ref1 = $("span.money");
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      money = ref1[j];
      $(money).attr("data-currency-" + Theme.currency, $(money).html());
    }
    this.switchCurrency();
    this.moveCurrencyConverter();
    $(window).on('resize.currency', window.ThemeUtils.debounce(this.moveCurrencyConverter, 100));
    return this.isInitialized = true;
  };

  CurrencyView.prototype.unload = function() {
    this.moveCurrencyConverter();
    return $(window).off('resize.currency');
  };

  CurrencyView.prototype.switchCurrency = function() {
    var $switcher, i, len, money, newCurrency, ref;
    if (!this.isInitialized) {
      return;
    }
    $switcher = $("[name=currencies]");
    newCurrency = $switcher.val();
    if (newCurrency === null) {
      newCurrency = Theme.currency;
    }
    ref = $("span.money");
    for (i = 0, len = ref.length; i < len; i++) {
      money = ref[i];
      $(money).html($(money).attr("data-currency-" + Theme.currency));
      $(money).attr("data-currency", Theme.currency);
    }
    Currency.convertAll(Theme.currency, newCurrency);
    Currency.currentCurrency = newCurrency;
    Currency.cookie.write(newCurrency);
    return this.$(".selected-currency").text(Currency.currentCurrency);
  };

  CurrencyView.prototype.moveCurrencyConverter = function() {
    var $currencyWrapper;
    $currencyWrapper = $('.currency-wrapper');
    if (window.ThemeUtils.isLessThanLarge()) {
      return $currencyWrapper.detach().insertAfter('.navigation-menu').addClass('mobile-currency-wrapper');
    } else {
      return $currencyWrapper.detach().removeClass('mobile-currency-wrapper').appendTo('[data-header-currency-switcher]');
    }
  };

  return CurrencyView;

})(Backbone.View);


/* Dynamic sections */

window.HomeSlideshowView = (function(superClass) {
  extend(HomeSlideshowView, superClass);

  function HomeSlideshowView() {
    return HomeSlideshowView.__super__.constructor.apply(this, arguments);
  }

  HomeSlideshowView.prototype.initialize = function() {
    this.$slideshow = this.$el;
    this.flickity = null;
    this.slideCount = this.$slideshow.data('slideshow-slides');
    this.autoPlay = false;
    this.autoplayHoverPause = false;
    if (this.$slideshow.is('[data-slideshow-autoplay]')) {
      this.autoPlay = parseInt(this.$slideshow.attr('data-slideshow-autoplay'), 10) * 1000;
      this.autoplayHoverPause = this.$slideshow.is('[data-slideshow-autoplay-hover-pause]');
    }
    return this._setupSlideshow();
  };

  HomeSlideshowView.prototype.unload = function() {
    if (this.flickity) {
      this.flickity.destroy();
      return this.flickity = null;
    }
  };

  HomeSlideshowView.prototype.onBlockSelect = function(event) {
    var $block, slideIndex;
    if (!this.flickity) {
      return;
    }
    $block = $(event.target);
    slideIndex = parseInt($block.data('slide-index'), 10);
    return this.flickity.select(slideIndex, true);
  };

  HomeSlideshowView.prototype._setupSlideshow = function() {
    var slideshowNavigation, slideshowPagination;
    slideshowNavigation = true;
    slideshowPagination = true;
    if (this.slideCount === 1) {
      slideshowNavigation = false;
      slideshowPagination = false;
    }
    return this.flickity = new Flickity(this.$slideshow[0], {
      adaptiveHeight: true,
      autoPlay: this.autoPlay,
      cellSelector: '[data-slideshow-slide]',
      imagesLoaded: true,
      pageDots: slideshowPagination,
      pauseAutoPlayOnHover: this.autoplayHoverPause,
      prevNextButtons: slideshowNavigation,
      resize: true,
      wrapAround: true
    });
  };

  return HomeSlideshowView;

})(Backbone.View);

window.ThemeUtils = {
  breakpoints: {
    small: 770,
    medium: 1080,
    large: 1280
  },
  extend: function() {
    var dest, i, k, len, obj, objs, v;
    dest = arguments[0], objs = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    for (i = 0, len = objs.length; i < len; i++) {
      obj = objs[i];
      for (k in obj) {
        v = obj[k];
        dest[k] = v;
      }
    }
    return dest;
  },
  windowWidth: function() {
    return window.innerWidth || $(window).width();
  },
  isLessThanMedium: function() {
    return this.windowWidth() < this.breakpoints.small;
  },
  isLessThanLarge: function() {
    return this.windowWidth() < this.breakpoints.medium;
  },
  isSmall: function() {
    return this.windowWidth() < this.breakpoints.small;
  },
  isMedium: function() {
    return this.windowWidth() >= this.breakpoints.small && this.windowWidth() < this.breakpoints.medium;
  },
  isLarge: function() {
    return this.windowWidth() >= this.breakpoints.medium;
  },
  debounce: function(func, wait, immediate) {
    var timeout;
    timeout = null;
    return function() {
      var args, callNow, context, later;
      context = this;
      args = arguments;
      later = function() {
        timeout = null;
        if (!immediate) {
          func.apply(context, args);
        }
      };
      callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) {
        func.apply(context, args);
      }
    };
  },
  unique: function(array) {
    var i, key, output, ref, results, value;
    output = {};
    for (key = i = 0, ref = array.length; 0 <= ref ? i < ref : i > ref; key = 0 <= ref ? ++i : --i) {
      output[array[key]] = array[key];
    }
    results = [];
    for (key in output) {
      value = output[key];
      results.push(value);
    }
    return results;
  },
  scrollTarget: function($el) {
    if (!($el instanceof jQuery)) {
      $el = $($el);
    }
    return $('html, body').animate({
      scrollTop: $el.offset().top
    }, 500, 'linear');
  },
  inViewport: function(el, direction) {
    var inViewportH, inViewportV, marginLeft, marginRight, rect, style, viewportHeight, viewportWidth;
    if (direction == null) {
      direction = 'both';
    }
    if (typeof jQuery === "function" && el instanceof jQuery) {
      el = el[0];
    }
    rect = el.getBoundingClientRect();
    style = el.currentStyle || window.getComputedStyle(el);
    marginRight = parseInt(style.marginRight) || 0;
    marginLeft = parseInt(style.marginLeft) || 0;
    if (document.documentElement.clientWidth < window.innerWidth) {
      viewportWidth = document.documentElement.clientWidth;
    } else {
      viewportWidth = window.innerWidth;
    }
    if (document.documentElement.clientHeight < window.innerHeight) {
      viewportHeight = document.documentElement.clientHeight;
    } else {
      viewportHeight = window.innerHeight;
    }
    inViewportH = rect.right - marginRight >= 0 && rect.left - marginLeft <= viewportWidth;
    inViewportV = rect.bottom >= 0 && rect.top <= viewportHeight;
    switch (direction) {
      case 'horizontal':
        return inViewportH;
      case 'vertical':
        return inViewportV;
      case 'both':
        return inViewportV && inViewportH;
    }
  },

  /*
      Resize Flickity slider to tallest cell in viewport
   */
  flickityResize: function(flickity) {
    var $viewport, cell, height, heights, i, len, ref;
    $viewport = $(flickity.viewport);
    heights = [];
    ref = flickity.cells;
    for (i = 0, len = ref.length; i < len; i++) {
      cell = ref[i];
      if (this.inViewport(cell.element, 'horizontal')) {
        heights.push($(cell.element).outerHeight(true));
      }
    }
    height = Math.max.apply(null, heights);
    return $viewport.height(height);
  }
};

window.ModalView = (function(superClass) {
  extend(ModalView, superClass);

  function ModalView() {
    return ModalView.__super__.constructor.apply(this, arguments);
  }

  ModalView.prototype.events = {
    "click": "close",
    "click [data-modal-close]": "close"
  };

  ModalView.prototype.initialize = function(options) {
    var callbacks, defaultCallbacks;
    if (options == null) {
      options = {};
    }
    callbacks = options.callbacks || {};
    this.$body = $(document.body);
    this.$window = $(window);
    this.$modalInner = this.$el.find('[data-modal-inner]');
    this.$contents = this.$el.find('[data-modal-contents]');
    this.mobileFriendly = this.$el.attr('data-modal-mobile-friendly') != null;
    this.selectors = {
      open: 'modal-opened',
      visible: 'modal-visible',
      active: 'modal-active',
      scrollLock: 'scroll-locked'
    };
    defaultCallbacks = {
      onOpen: (function(_this) {
        return function() {
          return {};
        };
      })(this),
      onClose: (function(_this) {
        return function() {
          return {};
        };
      })(this)
    };
    return this.callbacks = $.extend({}, defaultCallbacks, callbacks);
  };


  /*
      Manually open a modal.
   */

  ModalView.prototype.open = function() {
    this.$el.addClass(this.selectors.open);
    this.$window.on('resize.modal', (function(_this) {
      return function() {
        return _this._resize();
      };
    })(this));
    return this.callbacks.onOpen({
      $modal: this.$el,
      $contents: this.$contents
    });
  };


  /*
      Close modal, and clean up
   */

  ModalView.prototype.close = function() {
    this.$el.removeClass(this.selectors.active).removeClass(this.selectors.visible).removeClass(this.selectors.open);
    this.$body.removeClass(this.selectors.scrollLock);
    this.$contents.html('');
    this.callbacks.onClose();
    this.$window.off('resize.modal');
    return this.undelegateEvents();
  };


  /*
      Make a modal visible after content has been added
   */

  ModalView.prototype.showModal = function() {
    this.$body.addClass(this.selectors.scrollLock);
    this._position();
    return this.$el.addClass(this.selectors.visible).one('trend', (function(_this) {
      return function() {
        return _this.$el.addClass(_this.selectors.active);
      };
    })(this));
  };

  ModalView.prototype._resize = function() {
    var windowWidth;
    this._position();
    if (!this.mobileFriendly) {
      windowWidth = window.ThemeUtils.windowWidth();
      if (windowWidth > window.ThemeUtils.breakpoints.small) {
        return;
      }
      return this.close();
    }
  };


  /*
      Center modal vertically and horizontally
   */

  ModalView.prototype._position = function() {
    return this.$modalInner.css({
      marginTop: -(this.$modalInner.outerHeight() / 2),
      marginLeft: -(this.$modalInner.outerWidth() / 2)
    });
  };

  return ModalView;

})(Backbone.View);

MasonryVideo = (function() {
  function MasonryVideo($el, event) {
    var $modal, $target, modalID;
    this.$el = $el;
    this.modal = null;
    $target = $(event.currentTarget);
    modalID = $target.attr('data-masonry-video');
    $modal = this.$el.find("[data-modal-id=" + modalID + "]");
    this.modal = new ModalView({
      el: $modal,
      callbacks: {
        onOpen: (function(_this) {
          return function($els) {
            return _this._open($els);
          };
        })(this),
        onClose: (function(_this) {
          return function() {
            return _this._close();
          };
        })(this)
      }
    });
    this.modal.open();
  }

  MasonryVideo.prototype.remove = function() {
    if (this.modal) {
      return this.modal.close();
    }
  };

  MasonryVideo.prototype._open = function($els) {
    var $contents, $modal, $videoContents, $videoJson;
    $modal = $els.$modal, $contents = $els.$contents;
    $videoJson = $modal.find('[data-masonry-video]');
    try {
      $videoContents = $(JSON.parse($videoJson.text()));
    } catch (error1) {
      return console.warn('Unable to parse contents of video');
    }
    $contents.html($videoContents).fitVids();
    return this.modal.showModal();
  };

  MasonryVideo.prototype._close = function() {
    return this.modal = null;
  };

  return MasonryVideo;

})();

window.HomeMasonryView = (function(superClass) {
  extend(HomeMasonryView, superClass);

  function HomeMasonryView() {
    this._masonryVideo = bind(this._masonryVideo, this);
    this._masonryLayout = bind(this._masonryLayout, this);
    return HomeMasonryView.__super__.constructor.apply(this, arguments);
  }

  HomeMasonryView.prototype.events = {
    'click [data-masonry-url]': '_redirectMasonryFeatures',
    'click [data-masonry-video]': '_masonryVideo'
  };

  HomeMasonryView.prototype.initialize = function() {
    this.masonryVideo = null;
    this.$window = $(window);
    this.initializedClass = 'masonry-initialized';
    return this._validate();
  };

  HomeMasonryView.prototype.update = function($el) {
    this.$el = $el;
    return this._validate();
  };

  HomeMasonryView.prototype.prepareRemove = function() {
    var ref;
    if ((ref = this.masonryVideo) != null) {
      ref.remove();
    }
    return this.$window.off('resize.home-masonry');
  };

  HomeMasonryView.prototype._validate = function() {
    var isInitialized;
    this.$masonry = this.$el;
    isInitialized = this.$el.hasClass(this.initializedClass);
    this._bindEvents(isInitialized);
    return this._masonryLayout();
  };

  HomeMasonryView.prototype._bindEvents = function(isInitialized) {
    if (isInitialized) {
      return;
    }
    return this.$window.on('resize.home-masonry', window.ThemeUtils.debounce(this._masonryLayout, 10));
  };

  HomeMasonryView.prototype._masonryLayout = function() {
    if (this.$masonry.hasClass('home-masonry-feature-count-4') || this.$masonry.hasClass('home-masonry-feature-count-5') || this.$masonry.hasClass('home-masonry-feature-count-6')) {
      this._positionMasonryFeatures();
    }
    if ((window.ThemeUtils.isMedium() || window.ThemeUtils.isLarge()) && !this.$masonry.hasClass('home-masonry-feature-count-1')) {
      return this._setMasonryFeatureHeight();
    }
  };

  HomeMasonryView.prototype._positionMasonryFeatures = function() {
    var bumpFeature, containerWidth, offset;
    if (this.$masonry.hasClass('home-masonry-feature-count-4') || this.$masonry.hasClass('home-masonry-feature-count-5')) {
      bumpFeature = this.$masonry.find('.home-masonry-feature-3');
    } else if (this.$masonry.hasClass('home-masonry-feature-count-6')) {
      bumpFeature = this.$masonry.find('.home-masonry-feature-4');
    }
    containerWidth = this.$masonry.outerWidth();
    offset = -(containerWidth * 0.074);
    bumpFeature.css({
      'top': offset
    });
    return this.$masonry.css({
      'marginBottom': offset
    });
  };

  HomeMasonryView.prototype._setMasonryFeatureHeight = function() {
    var feature, featureAspect, featureFigure, featureFigureDiff, featureWidth, height, i, image, imageAspect, len, marginBottom, preciseHeight, ref, results, width;
    ref = this.$masonry.children('.home-masonry-feature');
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      feature = ref[i];
      feature = $(feature);
      height = feature.outerHeight(false);
      preciseHeight = feature[0].getBoundingClientRect().height;
      marginBottom = feature.css('marginBottom').replace('px', '');
      width = feature.outerWidth();
      featureFigure = feature.children('figure');
      featureWidth = featureFigure.outerWidth();
      featureFigureDiff = width / featureWidth;
      featureAspect = (height / width) * 100;
      feature.children('figure').css({
        'height': preciseHeight + "px"
      });
      image = feature.find('img, .home-masonry-feature-placeholder');
      image.css({
        'height': 'auto',
        'width': 'auto'
      });
      imageAspect = (image.height() / image.width()) * 100;
      if (imageAspect < featureAspect) {
        results.push(image.height(feature.children('figure').outerHeight()).css({
          'marginLeft': -((image.width() - width) / 2)
        }));
      } else {
        results.push(image.width(feature.children('figure').outerWidth()).css({
          'marginTop': -((image.height() - height) / 2)
        }));
      }
    }
    return results;
  };

  HomeMasonryView.prototype._redirectMasonryFeatures = function(e) {
    var $target, url;
    $target = $(e.currentTarget);
    if (!$target.parents(this.$masonry).length) {
      return;
    }
    url = $target.data('masonry-url');
    if (url !== '') {
      return window.location = url;
    }
  };

  HomeMasonryView.prototype._masonryVideo = function(event) {
    return this.masonryVideo = new MasonryVideo(this.$el, event);
  };

  return HomeMasonryView;

})(Backbone.View);

window.HomeMasonryAlternativeView = (function(superClass) {
  extend(HomeMasonryAlternativeView, superClass);

  function HomeMasonryAlternativeView() {
    this._masonryVideo = bind(this._masonryVideo, this);
    this._masonryLayout = bind(this._masonryLayout, this);
    return HomeMasonryAlternativeView.__super__.constructor.apply(this, arguments);
  }

  HomeMasonryAlternativeView.prototype.events = {
    'click [data-masonry-url]': '_redirectMasonryFeatures',
    'click [data-masonry-video]': '_masonryVideo'
  };

  HomeMasonryAlternativeView.prototype.initialize = function() {
    this.$window = $(window);
    this.masonryVideo = null;
    this.initializedClass = 'masonry-initialized';
    return this._validate();
  };

  HomeMasonryAlternativeView.prototype.update = function($el) {
    this.$el = $el;
    return this._validate();
  };

  HomeMasonryAlternativeView.prototype.prepareRemove = function() {
    var ref;
    if ((ref = this.masonryVideo) != null) {
      ref.remove();
    }
    return this.$window.off('resize.home-masonry');
  };

  HomeMasonryAlternativeView.prototype._validate = function() {
    var isInitialized;
    this.$masonry = this.$el;
    isInitialized = this.$el.hasClass(this.initializedClass);
    this._bindEvents(isInitialized);
    return this._masonryLayout();
  };

  HomeMasonryAlternativeView.prototype._bindEvents = function(isInitialized) {
    if (isInitialized) {
      return;
    }
    return this.$window.on('resize.home-masonry', window.ThemeUtils.debounce(this._masonryLayout, 10));
  };

  HomeMasonryAlternativeView.prototype._masonryLayout = function() {
    if (window.ThemeUtils.isMedium() || window.ThemeUtils.isLarge()) {
      return this.setupAlternativeMasonryFeatures('desktop');
    } else {
      return this.setupAlternativeMasonryFeatures('mobile');
    }
  };

  HomeMasonryAlternativeView.prototype._redirectMasonryFeatures = function(e) {
    var $target, url;
    $target = $(e.currentTarget);
    if (!$target.parents(this.$masonry).length) {
      return;
    }
    url = $target.data('masonry-url');
    if (url !== '') {
      return window.location = url;
    }
  };

  HomeMasonryAlternativeView.prototype.setupAlternativeMasonryFeatures = function(layout) {
    var containerHeight, windowHeight;
    this.masonryFeaturesContainer = this.$masonry;
    this.masonryFeatures = this.$('.home-masonry-feature');
    windowHeight = document.documentElement.clientHeight;
    if (layout === 'desktop') {
      if (this.masonryFeaturesContainer.hasClass('home-masonry-gutters')) {
        this.masonryFeaturesContainer.height(windowHeight - 20);
      } else {
        this.masonryFeaturesContainer.height(windowHeight);
      }
      this.masonryFeatures.removeClass('mobile natural');
      if (this.masonryFeaturesContainer.hasClass('home-masonry-feature-count-1') || this.masonryFeaturesContainer.hasClass('home-masonry-feature-count-2') || this.masonryFeaturesContainer.hasClass('home-masonry-feature-count-3')) {
        this.masonryFeatures.css({
          'height': '100%'
        });
      } else if (this.masonryFeaturesContainer.hasClass('home-masonry-feature-count-4')) {
        this.$('.home-masonry-feature-1, .home-masonry-feature-4').css({
          'height': windowHeight * 0.45
        });
        this.$('.home-masonry-feature-2, .home-masonry-feature-3').css({
          'height': windowHeight * 0.55
        });
        this.$('.home-masonry-feature-3').css({
          'marginTop': -windowHeight * 0.1
        });
      } else if (this.masonryFeaturesContainer.hasClass('home-masonry-feature-count-5')) {
        this.$('.home-masonry-feature-1, .home-masonry-feature-4, .home-masonry-feature-5').css({
          'height': windowHeight * 0.45
        });
        this.$('.home-masonry-feature-2, .home-masonry-feature-3').css({
          'height': windowHeight * 0.55
        });
        this.$('.home-masonry-feature-3').css({
          'marginTop': -windowHeight * 0.1
        });
      } else if (this.masonryFeaturesContainer.hasClass('home-masonry-feature-count-6')) {
        this.$('.home-masonry-feature-1, .home-masonry-feature-5, .home-masonry-feature-6').css({
          'height': windowHeight * 0.45
        });
        this.$('.home-masonry-feature-2, .home-masonry-feature-3, .home-masonry-feature-4').css({
          'height': windowHeight * 0.55
        });
        this.$('.home-masonry-feature-4').css({
          'marginTop': -windowHeight * 0.1
        });
      }
      return this.positionMasonryFeatures();
    } else if (layout === 'mobile') {
      this.masonryFeaturesContainer.css({
        'height': 'auto'
      });
      this.masonryFeatures.addClass('mobile natural');
      containerHeight = this.masonryFeaturesContainer.height();
      if (windowHeight > containerHeight) {
        this.masonryFeatures.removeClass('natural').css({
          'height': windowHeight / this.$('.enable-mobile-true').length
        });
        return this.positionMasonryFeatures();
      } else {
        return this.masonryFeatures.children('figure').css({
          'marginLeft': 0
        });
      }
    }
  };

  HomeMasonryAlternativeView.prototype.positionMasonryFeatures = function() {
    var feature, featureAspect, figure, figureAspect, height, i, len, preciseHeight, ref, results, width;
    ref = this.masonryFeatures;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      feature = ref[i];
      feature = $(feature);
      height = feature.outerHeight(false);
      preciseHeight = feature[0].getBoundingClientRect().height;
      width = feature.outerWidth();
      featureAspect = height / width;
      figure = feature.children('figure');
      figure.css({
        'height': 'auto',
        'width': 'auto',
        'marginLeft': 0,
        'marginTop': 0
      });
      figureAspect = figure.height() / figure.width();
      if (figureAspect < featureAspect) {
        results.push(figure.width(height / figureAspect).css({
          'marginLeft': -((figure.width() - width) / 2)
        }));
      } else {
        results.push(figure.css({
          'marginTop': -((figure.height() - height) / 2)
        }));
      }
    }
    return results;
  };

  HomeMasonryAlternativeView.prototype._masonryVideo = function(event) {
    return this.masonryVideo = new MasonryVideo(this.$el, event);
  };

  return HomeMasonryAlternativeView;

})(Backbone.View);

window.HomeCollectionsView = (function(superClass) {
  extend(HomeCollectionsView, superClass);

  function HomeCollectionsView() {
    return HomeCollectionsView.__super__.constructor.apply(this, arguments);
  }

  HomeCollectionsView.prototype.events = {
    "click .home-collection-overlay-wrapper": "_redirectCollection"
  };

  HomeCollectionsView.prototype.initialize = function() {
    this.initializedClass = 'collection-initialized';
    this._bindEvents();
    return this._validate();
  };

  HomeCollectionsView.prototype._validate = function() {
    var isInitialized;
    this.$collectionsContainer = this.$("[data-collections]", this.$el);
    isInitialized = this.$el.hasClass(this.initializedClass);
    return this._setupCollections();
  };

  HomeCollectionsView.prototype.update = function($el) {
    this.$el = $el;
    return this._validate();
  };

  HomeCollectionsView.prototype.remove = function() {
    HomeCollectionsView.__super__.remove.apply(this, arguments);
    return $(window).off("resize.blog-view");
  };

  HomeCollectionsView.prototype.onBlockSelect = function(event) {
    return this._validate();
  };

  HomeCollectionsView.prototype.onBlockDeselect = function(event) {
    return this._validate();
  };

  HomeCollectionsView.prototype._bindEvents = function() {
    return $(window).on("resize.collections-view", (function(_this) {
      return function() {
        _this._setupCollections();
        if (!Modernizr.csstransforms) {
          return _this._centerCollectionText();
        }
      };
    })(this));
  };

  HomeCollectionsView.prototype._setupCollections = function() {
    var collectionHeight, collectionImage, featuredCollectionImage, i, len;
    collectionHeight = 10000;
    featuredCollectionImage = this.$(".home-collection-image img, .home-collection-image svg");
    featuredCollectionImage.css({
      'height': 'auto'
    });
    for (i = 0, len = featuredCollectionImage.length; i < len; i++) {
      collectionImage = featuredCollectionImage[i];
      if (collectionImage.getBoundingClientRect().height < collectionHeight) {
        collectionHeight = collectionImage.getBoundingClientRect().height;
      }
    }
    featuredCollectionImage.css({
      'height': ''
    });
    return this.$(".home-collection-image").height(collectionHeight);
  };

  HomeCollectionsView.prototype._centerCollectionText = function() {
    var collectionText, i, len, ref, results, textHeight, textWidth;
    ref = this.$(".home-collection-overlay", this.$collectionsContainer);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      collectionText = ref[i];
      collectionText = $(collectionText);
      textHeight = collectionText.height();
      textWidth = collectionText.outerWidth();
      results.push(collectionText.css({
        "marginTop": -(textHeight / 2),
        "marginLeft": -(textWidth / 2)
      }));
    }
    return results;
  };

  HomeCollectionsView.prototype._redirectCollection = function(e) {
    var $currentTarget, url;
    $currentTarget = $(e.currentTarget);
    if (!$currentTarget.parents(this.$collectionsContainer).length) {

    } else {
      url = $currentTarget.data("url");
      if (url !== "") {
        return window.location = url;
      }
    }
  };

  return HomeCollectionsView;

})(Backbone.View);

MasonryGrid = (function() {
  function MasonryGrid(options) {
    var defaultSettings;
    this.$el = options.$el;
    defaultSettings = {
      itemSelector: '[data-masonry-item]',
      columnWidth: '[data-masonry-sizer]',
      gutter: 0,
      percentPosition: false
    };
    this.settings = window.ThemeUtils.extend(defaultSettings, options.settings);
    this.$masonry = this.$el.masonry(this.settings);
    this.$masonry.masonry('layout');
  }

  MasonryGrid.prototype.unload = function() {
    return this.$masonry.masonry('destroy');
  };

  return MasonryGrid;

})();

window.ProductMasonryLayoutView = (function(superClass) {
  extend(ProductMasonryLayoutView, superClass);

  function ProductMasonryLayoutView() {
    this._initLayout = bind(this._initLayout, this);
    return ProductMasonryLayoutView.__super__.constructor.apply(this, arguments);
  }

  ProductMasonryLayoutView.prototype.initialize = function() {
    this.$window = $(window);
    this.selectors = {
      gallery: {
        el: '[data-masonry-gallery]',
        itemSelector: '.product-image',
        columnWidth: '[data-masonry-image-sizer]'
      },
      relatedProducts: {
        el: '[data-masonry-products]',
        itemSelector: '.product-list-item',
        columnWidth: '[data-masonry-products-sizer]'
      }
    };
    this.masonry = {
      gallery: null,
      relatedProducts: null
    };
    this.flickity = {
      gallery: null,
      relatedProducts: null
    };
    this.$gallery = this.$(this.selectors.gallery.el);
    this.$relatedProducts = this.$(this.selectors.relatedProducts.el);
    this.hasGallery = this.$gallery.length;
    this.hasRelatedProducts = this.$relatedProducts.length;
    this._initLayout();
    return this._bindEvents();
  };

  ProductMasonryLayoutView.prototype.prepareRemove = function() {
    this.$window.off('resize.product-masonry-layout');
    this.$gallery.off('product-masonry-layout');
    this.$relatedProducts.off('product-masonry-layout');
    if (this.flickity) {
      this._destroyFlickity();
    }
    if (this.masonry) {
      return this._destroyMasonry();
    }
  };

  ProductMasonryLayoutView.prototype._bindEvents = function() {
    return this.$window.on('resize.product-masonry-layout', window.ThemeUtils.debounce(this._initLayout, 100));
  };

  ProductMasonryLayoutView.prototype._initLayout = function() {
    if (window.ThemeUtils.isSmall()) {
      return this._initMobile();
    } else {
      return this._initDesktop();
    }
  };

  ProductMasonryLayoutView.prototype._initMobile = function() {
    this._destroyMasonry();
    return this._initFlickity();
  };

  ProductMasonryLayoutView.prototype._initDesktop = function() {
    this._destroyFlickity();
    return this._initMasonry();
  };

  ProductMasonryLayoutView.prototype._initFlickity = function() {
    if (this.hasGallery && !this.flickity.gallery) {
      this._galleryReset();
      this.flickity.gallery = new Flickity(this.$gallery[0], {
        cellAlign: 'left',
        cellSelector: this.selectors.gallery.itemSelector,
        contain: false,
        percentPosition: false,
        prevNextButtons: false,
        pageDots: false,
        imagesLoaded: true,
        setGallerySize: false
      });
      this._flickityEvents({
        $el: this.$gallery,
        flickity: this.flickity.gallery
      });
    }
    if (this.hasRelatedProducts && !this.flickity.relatedProducts) {
      this._relatedProductsReset();
      this.flickity.relatedProducts = new Flickity(this.$relatedProducts[0], {
        cellAlign: 'left',
        cellSelector: this.selectors.relatedProducts.itemSelector,
        contain: true,
        prevNextButtons: false,
        pageDots: false,
        imagesLoaded: true,
        setGallerySize: false
      });
      return this._flickityEvents({
        $el: this.$relatedProducts,
        flickity: this.flickity.relatedProducts
      });
    }
  };

  ProductMasonryLayoutView.prototype._destroyFlickity = function() {
    if (this.flickity.gallery) {
      this.flickity.gallery.destroy();
      this.flickity.gallery = null;
      this.$window.off('resize.product-images-flickity');
    }
    if (this.flickity.relatedProducts) {
      this.flickity.relatedProducts.destroy();
      return this.flickity.relatedProducts = null;
    }
  };

  ProductMasonryLayoutView.prototype._initMasonry = function() {
    if (this.hasGallery && !this.masonry.gallery) {
      this._galleryReset();
      this.masonry.gallery = new MasonryGrid({
        $el: this.$gallery,
        settings: {
          itemSelector: this.selectors.gallery.itemSelector,
          columnWidth: this.selectors.gallery.columnWidth
        }
      });
    }
    if (this.hasRelatedProducts && !this.masonry.relatedProducts) {
      this._relatedProductsReset();
      return this.masonry.relatedProducts = new MasonryGrid({
        $el: this.$relatedProducts,
        settings: {
          itemSelector: this.selectors.relatedProducts.itemSelector,
          columnWidth: this.selectors.relatedProducts.columnWidth
        }
      });
    }
  };

  ProductMasonryLayoutView.prototype._destroyMasonry = function() {
    if (this.masonry.gallery) {
      this.masonry.gallery.unload();
      this.masonry.gallery = null;
    }
    if (this.masonry.relatedProducts) {
      this.masonry.relatedProducts.unload();
      return this.masonry.relatedProducts = null;
    }
  };

  ProductMasonryLayoutView.prototype._galleryReset = function() {
    return this.$gallery.find(this.selectors.gallery.itemSelector).attr('style', '');
  };

  ProductMasonryLayoutView.prototype._relatedProductsReset = function() {
    return this.$relatedProducts.find(this.selectors.relatedProducts.itemSelector).attr('style', '');
  };

  ProductMasonryLayoutView.prototype._flickityEvents = function(options) {
    var $el, flickity;
    $el = options.$el, flickity = options.flickity;
    flickity.on('cellSelect', function() {
      return $el.trigger('product-masonry-layout');
    });
    flickity.on('settle', function() {
      return $el.trigger('product-masonry-layout');
    });
    $el.on('product-masonry-layout', function() {
      return window.ThemeUtils.flickityResize(flickity);
    });
    $el.trigger('product-masonry-layout');
    return this.$window.on('resize.product-images-flickity', window.ThemeUtils.debounce(function() {
      return $el.trigger('product-masonry-layout');
    }, 10));
  };

  return ProductMasonryLayoutView;

})(Backbone.View);

window.LinkedOptions = (function() {
  function LinkedOptions(options) {
    this.options = options;
    this._init();
  }

  LinkedOptions.prototype._init = function() {
    return this._mapVariants(this.options.productJSON);
  };

  LinkedOptions.prototype._getCurrent = function(optionIndex) {
    var key, option1, option2, selector;
    if (this.options.type === 'select') {
      switch (optionIndex) {
        case 0:
          key = 'root';
          selector = this.options.$selector.eq(0);
          break;
        case 1:
          key = this.options.$selector.eq(0).val();
          selector = this.options.$selector.eq(1);
          break;
        case 2:
          key = (this.options.$selector.eq(0).val()) + " / " + (this.options.$selector.eq(1).val());
          selector = this.options.$selector.eq(2);
      }
    }
    if (this.options.type === 'radio') {
      switch (optionIndex) {
        case 0:
          key = 'root';
          selector = this.options.$selector.filter('[data-option-index=0]').filter(':checked');
          break;
        case 1:
          key = this.options.$selector.filter('[data-option-index=0]').filter(':checked').val();
          selector = this.options.$selector.filter('[data-option-index=1]').filter(':checked');
          break;
        case 2:
          option1 = this.options.$selector.filter('[data-option-index=0]').filter(':checked').val();
          option2 = this.options.$selector.filter('[data-option-index=1]').filter(':checked').val();
          key = option1 + " / " + option2;
          selector = this.options.$selector.filter('[data-option-index=2]').filter(':checked');
      }
    }
    return {
      key: key,
      selector: selector
    };
  };

  LinkedOptions.prototype._updateOptions = function(optionIndex, optionsMap) {
    var $nextOption, $option, $selector, $selectorOptions, availableOptions, i, initialValue, j, key, len, len1, nextSelector, option, ref, selector, updateSelected;
    nextSelector = optionIndex + 1;
    updateSelected = false;
    ref = this._getCurrent(optionIndex), key = ref.key, selector = ref.selector;
    availableOptions = optionsMap[key] || [];
    if (this.options.type === 'select') {
      $selector = this.options.$productForm.find(selector);
      initialValue = $selector.val();
      $selectorOptions = $selector.find('option');
      for (i = 0, len = $selectorOptions.length; i < len; i++) {
        option = $selectorOptions[i];
        $option = $(option);
        if (availableOptions.indexOf(option.value) === -1) {
          if (option.selected) {
            updateSelected = true;
          }
          $option.prop('disabled', true).prop('selected', false);
        } else {
          $option.prop('disabled', false);
        }
      }
      if (availableOptions.indexOf(initialValue) !== -1) {
        $selector.val(initialValue);
      }
      if (updateSelected) {
        $selectorOptions.filter(':not(:disabled)').eq(0).prop('selected', true);
      }
    }
    if (this.options.type === 'radio') {
      $selector = this.options.$selector.filter("[data-option-index=" + optionIndex + "]");
      for (j = 0, len1 = $selector.length; j < len1; j++) {
        option = $selector[j];
        $option = $(option);
        if (availableOptions.indexOf(option.value) === -1) {
          if (option.checked) {
            updateSelected = true;
          }
          $option.prop('disabled', true).prop('checked', false);
        } else {
          $option.prop('disabled', false);
        }
      }
      if (updateSelected) {
        $selector.filter(':not(:disabled)').eq(0).attr('checked', true).trigger('click');
      }
    }
    $selector.trigger('change');
    $nextOption = this.options.$selector.filter("[data-option-index=" + nextSelector + "]");
    if ($nextOption.length !== 0) {
      return this._updateOptions(nextSelector, optionsMap);
    }
  };

  LinkedOptions.prototype._mapVariants = function(product) {
    var i, key, len, optionsMap, ref, variant;
    optionsMap = [];
    optionsMap['root'] = [];
    ref = product.variants;
    for (i = 0, len = ref.length; i < len; i++) {
      variant = ref[i];
      if (variant.available) {
        optionsMap['root'].push(variant.option1);
        optionsMap['root'] = window.ThemeUtils.unique(optionsMap['root']);
        if (product.options.length > 1) {
          key = variant.option1;
          optionsMap[key] = optionsMap[key] || [];
          optionsMap[key].push(variant.option2);
          optionsMap[key] = window.ThemeUtils.unique(optionsMap[key]);
        }
        if (product.options.length > 2) {
          key = variant.option1 + " / " + variant.option2;
          optionsMap[key] = optionsMap[key] || [];
          optionsMap[key].push(variant.option3);
          optionsMap[key] = window.ThemeUtils.unique(optionsMap[key]);
        }
      }
    }
    this._updateOptions(0, optionsMap);
    return this.options.$selector.on('change', (function(_this) {
      return function(event) {
        var index, nextSelector;
        index = parseInt($(event.currentTarget).attr('data-option-index'), 10);
        nextSelector = index + 1;
        return _this._updateOptions(nextSelector, optionsMap);
      };
    })(this));
  };

  return LinkedOptions;

})();

window.VariantHelper = (function() {
  function VariantHelper(options) {
    var defaultOptions, isShopify;
    defaultOptions = {
      $addToCartButton: null,
      $priceFields: null,
      $productForm: null,
      $productThumbnails: null,
      $selector: null,
      type: 'select',
      productJSON: null,
      productSettings: null
    };
    this.options = window.ThemeUtils.extend(defaultOptions, options);
    this.$body = $(document.body);
    this.linkedOptions = null;
    this.enableHistory = false;
    this.$masterSelect = this.options.$productForm.find(".product-select");
    isShopify = window.Shopify && window.Shopify.preview_host;
    if (window.history && window.history.replaceState && this.options.productSettings.enableHistory && !isShopify) {
      this.enableHistory = true;
    }
    this._init();
    this._bindEvents();
  }

  VariantHelper.prototype._init = function() {
    var i, len, ref, select;
    if (this.options.type === 'select') {
      ref = this.options.$selector;
      for (i = 0, len = ref.length; i < len; i++) {
        select = ref[i];
        this._setSelectLabel(null, $(select));
      }
    }
    if (this.options.productSettings.linkedOptions) {
      this.linkedOptions = new LinkedOptions(this.options);
    }
    return this._updateCurrency();
  };

  VariantHelper.prototype._bindEvents = function() {
    return this.options.$selector.on('change.variant-helper', (function(_this) {
      return function(event) {
        return _this._variantChange(event);
      };
    })(this));
  };

  VariantHelper.prototype.unload = function() {
    return this.options.$selector.off('.variant-helper');
  };

  VariantHelper.prototype._setSelectLabel = function(event, $target) {
    var selectedOption;
    if (event == null) {
      event = null;
    }
    if ($target == null) {
      $target = false;
    }
    if (!$target) {
      $target = $(event.currentTarget);
    }
    selectedOption = $target.find('option:selected').val();
    return $target.prev('[data-select-text]').find('[data-selected-option]').text(selectedOption);
  };

  VariantHelper.prototype._getCurrentOptions = function() {
    var $inputs, productOptions;
    productOptions = [];
    $inputs = this.options.$selector;
    if (this.options.type === 'radio') {
      $inputs = $inputs.filter(':checked');
    }
    $inputs.each(function(index, element) {
      return productOptions.push($(element).val());
    });
    return productOptions;
  };

  VariantHelper.prototype._getVariantFromOptions = function(productOptions) {
    var foundVariant, i, isMatch, len, ref, variant;
    if (this.options.productJSON.variants == null) {
      return;
    }
    foundVariant = null;
    ref = this.options.productJSON.variants;
    for (i = 0, len = ref.length; i < len; i++) {
      variant = ref[i];
      isMatch = productOptions.every(function(value, index) {
        return variant.options[index] === value;
      });
      if (isMatch) {
        foundVariant = variant;
      }
    }
    return foundVariant;
  };

  VariantHelper.prototype._updateMasterSelect = function(variant) {
    var ref;
    if (variant == null) {
      return;
    }
    if ((ref = this.$masterSelect.find("[data-variant-id=" + variant.id + "]")) != null) {
      ref.prop('selected', true);
    }
    return this.$masterSelect.trigger('change');
  };

  VariantHelper.prototype._updatePrice = function(variant) {
    var $addToCartButton, $moneyEl, $priceFields, attribute, i, j, len, len1, priceField, productSettings, ref;
    $addToCartButton = this.options.$addToCartButton;
    $priceFields = this.options.$priceFields;
    productSettings = this.options.productSettings;
    if (variant) {
      for (i = 0, len = $priceFields.length; i < len; i++) {
        priceField = $priceFields[i];
        $moneyEl = $(priceField).find('.money');
        ref = $moneyEl[0].attributes;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          attribute = ref[j];
          if (attribute.name.indexOf("data-") > -1) {
            $moneyEl.attr(attribute.name, "");
          }
        }
      }
      if (variant.available) {
        $addToCartButton.val(productSettings.addToCartText).removeClass('disabled').removeAttr('disabled');
      } else {
        $addToCartButton.val(productSettings.soldOutText).addClass('disabled').attr('disabled', 'disabled');
      }
      if (variant.compare_at_price > variant.price) {
        $priceFields.find('.money:not(.original)').html(Shopify.formatMoney(variant.price, Theme.moneyFormat)).attr("data-currency-" + Theme.currency, Shopify.formatMoney(variant.price, Theme.moneyFormat)).attr("data-currency", Theme.currency);
        $priceFields.find('.original').html(Shopify.formatMoney(variant.compare_at_price, Theme.moneyFormat)).addClass('visible').attr("data-currency-" + Theme.currency, Shopify.formatMoney(variant.compare_at_price, Theme.moneyFormat)).attr("data-currency", Theme.currency);
      } else {
        $priceFields.find('.money').html(Shopify.formatMoney(variant.price, Theme.moneyFormat)).attr("data-currency-" + Theme.currency, Shopify.formatMoney(variant.price, Theme.moneyFormat)).attr("data-currency", Theme.currency);
        $priceFields.find('.original').removeClass('visible').attr("data-currency-" + Theme.currency, Shopify.formatMoney(variant.compare_at_price, Theme.moneyFormat)).attr("data-currency", Theme.currency);
      }
    } else {
      $addToCartButton.val(productSettings.unavailableText).addClass('disabled').attr('disabled', 'disabled');
    }
    return this._updateCurrency();
  };

  VariantHelper.prototype._updateImages = function(variant) {
    var $thumbById, $thumbByIndex, imageId, imagePosition, ref, ref1;
    imageId = variant != null ? (ref = variant.featured_image) != null ? ref.id : void 0 : void 0;
    imagePosition = (variant != null ? (ref1 = variant.featured_image) != null ? ref1.position : void 0 : void 0) - 1;
    $thumbById = this.options.$productThumbnails.filter("[data-image-id='" + imageId + "']");
    $thumbByIndex = this.options.$productThumbnails.filter("[data-image-position='" + imagePosition + "']");
    if ((imageId != null) && $thumbById.length) {
      $thumbById.trigger('click');
    }
    if ((imagePosition != null) && $thumbByIndex.length) {
      return $thumbByIndex.trigger('click');
    }
  };

  VariantHelper.prototype._updateHistory = function(variant) {
    var newUrl, re, search, variantUrl;
    if (!(this.enableHistory && (variant != null))) {
      return;
    }
    re = new RegExp("([?|&]variant=)[0-9]+(&{0,1})");
    search = window.location.search;
    if (search.match(re)) {
      search = search.replace(re, "$1" + variant.id + "$2");
    } else if (search.indexOf("?") !== -1) {
      search += "&variant=" + variant.id;
    } else {
      search += "?variant=" + variant.id;
    }
    newUrl = [window.location.protocol, '//', window.location.host, window.location.pathname, search];
    variantUrl = newUrl.join('');
    return window.history.replaceState({
      path: variantUrl
    }, '', variantUrl);
  };

  VariantHelper.prototype._variantChange = function(event) {
    var productOptions, variant;
    if (this.options.type === 'select') {
      this._setSelectLabel(event);
    }
    productOptions = this._getCurrentOptions();
    variant = this._getVariantFromOptions(productOptions);
    this._updateMasterSelect(variant);
    this._updatePrice(variant);
    this._updateImages(variant);
    return this._updateHistory(variant);
  };

  VariantHelper.prototype._updateCurrency = function() {
    if (Theme.currencySwitcher) {
      return $(".currency-switcher").trigger('switch-currency');
    }
  };

  return VariantHelper;

})();

window.ImageZoomView = (function(superClass) {
  extend(ImageZoomView, superClass);

  function ImageZoomView() {
    return ImageZoomView.__super__.constructor.apply(this, arguments);
  }

  ImageZoomView.prototype.events = {
    "prepare-zoom": "prepareZoom",
    "click": "toggleZoom",
    "mouseout .product-zoom": "toggleZoom",
    "mousemove .product-zoom": "zoomImage"
  };

  ImageZoomView.prototype.initialize = function() {
    this.zoomArea = this.$(".product-zoom");
    return this.prepareZoom();
  };

  ImageZoomView.prototype.prepareZoom = function() {
    var newImage, photoAreaHeight, photoAreaWidth;
    photoAreaWidth = this.$el.width();
    photoAreaHeight = this.$el.height();
    newImage = new Image();
    $(newImage).on("load", (function(_this) {
      return function() {
        var ratio, ratios;
        _this.zoomImageWidth = newImage.width;
        _this.zoomImageHeight = newImage.height;
        ratios = new Array();
        ratios[0] = _this.zoomImageWidth / photoAreaWidth;
        ratios[1] = _this.zoomImageHeight / photoAreaHeight;
        ratio = Math.max.apply(Math, ratios);
        if (ratio < 1.4) {
          _this.$el.removeClass("zoom-enabled");
        } else {
          _this.$el.addClass("zoom-enabled");
          return _this.zoomArea.css({
            backgroundImage: "url(" + newImage.src + ")"
          });
        }
      };
    })(this));
    return newImage.src = this.$("img").attr("src");
  };

  ImageZoomView.prototype.toggleZoom = function(e) {
    if (this.$el.hasClass("zoom-enabled")) {
      if (e.type === "mouseout") {
        this.zoomArea.removeClass("active");
        return;
      }
      this.zoomArea.toggleClass("active");
      return this.zoomImage(e);
    }
  };

  ImageZoomView.prototype.zoomImage = function(e) {
    var bigImageOffset, bigImageX, bigImageY, mousePositionX, mousePositionY, newBackgroundPosition, ratioX, ratioY, zoomHeight, zoomWidth;
    zoomWidth = this.zoomArea.width();
    zoomHeight = this.zoomArea.height();
    bigImageOffset = this.$el.offset();
    bigImageX = Math.round(bigImageOffset.left);
    bigImageY = Math.round(bigImageOffset.top);
    mousePositionX = e.pageX - bigImageX;
    mousePositionY = e.pageY - bigImageY;
    if (mousePositionX < zoomWidth && mousePositionY < zoomHeight && mousePositionX > 0 && mousePositionY > 0) {
      if (this.zoomArea.hasClass("active")) {
        ratioX = Math.round(mousePositionX / zoomWidth * this.zoomImageWidth - zoomWidth / 2) * -1;
        ratioY = Math.round(mousePositionY / zoomHeight * this.zoomImageHeight - zoomHeight / 2) * -1;
        if (ratioX > 0) {
          ratioX = 0;
        }
        if (ratioY > 0) {
          ratioY = 0;
        }
        if (ratioX < -(this.zoomImageWidth - zoomWidth)) {
          ratioX = -(this.zoomImageWidth - zoomWidth);
        }
        if (ratioY < -(this.zoomImageHeight - zoomHeight)) {
          ratioY = -(this.zoomImageHeight - zoomHeight);
        }
        newBackgroundPosition = ratioX + "px " + ratioY + "px";
        return this.zoomArea.css({
          backgroundPosition: newBackgroundPosition
        });
      }
    }
  };

  return ImageZoomView;

})(Backbone.View);

window.ProductSlideshowView = (function(superClass) {
  extend(ProductSlideshowView, superClass);

  function ProductSlideshowView() {
    return ProductSlideshowView.__super__.constructor.apply(this, arguments);
  }

  ProductSlideshowView.prototype.events = {
    "click .product-thumbnails-navigation-previous, .product-thumbnails-navigation-next": "moveProductThumbnails"
  };

  ProductSlideshowView.prototype.initialize = function() {
    this.productThumbnailsWrapper = this.$(".product-thumbnails-wrapper");
    this.productThumbnails = this.$(".product-thumbnails");
    this.productThumbnail = this.$(".product-thumbnail");
    if (this.$(".product-thumbnails").hasClass("has-side-scroll")) {
      this.setupProductSlideshow();
      return $(window).resize((function(_this) {
        return function() {
          _this.setupProductSlideshow();
          return _this.productThumbnails.css({
            "left": 0
          });
        };
      })(this));
    }
  };

  ProductSlideshowView.prototype.setupProductSlideshow = function() {
    var containerWidth, currentImageHeight, currentImageWidth, i, image, len, ref, tallestImageHeight;
    tallestImageHeight = 0;
    containerWidth = 0;
    this.productThumbnailPadding = parseInt(this.productThumbnail.css("padding-left"), 10) * 2;
    this.productThumbnail.width((this.productThumbnailsWrapper.width() / 4) - this.productThumbnailPadding);
    ref = this.productThumbnail;
    for (i = 0, len = ref.length; i < len; i++) {
      image = ref[i];
      currentImageHeight = image.getBoundingClientRect().height;
      currentImageWidth = image.getBoundingClientRect().width;
      if (currentImageHeight > tallestImageHeight) {
        tallestImageHeight = currentImageHeight;
      }
      containerWidth += currentImageWidth;
    }
    this.productThumbnailsWrapper.height(tallestImageHeight);
    return this.productThumbnails.width(containerWidth);
  };

  ProductSlideshowView.prototype.moveProductThumbnails = function(e) {
    var containerWidth, currentPosition;
    containerWidth = this.productThumbnailsWrapper.width();
    currentPosition = this.productThumbnails.position().left;
    if ($(e.currentTarget).hasClass("product-thumbnails-navigation-next") && (currentPosition - containerWidth) > -(this.$(".product-thumbnails").outerWidth())) {
      return this.productThumbnails.css({
        "left": currentPosition - containerWidth
      });
    } else if ($(e.target).hasClass("product-thumbnails-navigation-previous") && currentPosition < 0) {
      return this.productThumbnails.css({
        "left": currentPosition + containerWidth
      });
    }
  };

  return ProductSlideshowView;

})(Backbone.View);

Product = (function() {
  function Product(el, options) {
    this.positionProductInfo = bind(this.positionProductInfo, this);
    this.setupProductDetails = bind(this.setupProductDetails, this);
    var i, j, len, len1, ref, ref1, ref2, rte, select;
    this.el = el;
    this.$el = $(el);
    this.product = options.product;
    this.productSettings = options.product_settings;
    this.imagesLayout = options.images_layout;
    this.enableZoom = options.enable_zoom;
    this.enableFixedPositioning = options.enable_fixed_positioning;
    this.window = $(window);
    this.zoomView = null;
    this.variantHelpers = null;
    this.productSlideshow = null;
    this.productMasonryLayout = null;
    this.rteViews = [];
    this.selectViews = [];
    this.$productForm = $("[data-product-form]", this.el);
    this.$productContainer = $(".product", this.el);
    this.productMainImage = $(".product-main-image", this.el);
    this.productImages = $(".product-images", this.el);
    this.$productThumbnails = $(".product-thumbnails img", this.el);
    this.productThumbnail = $(".product-thumbnail", this.el);
    this.productDetailsWrapper = $(".product-details-wrapper", this.el);
    this.productDetails = $(".product-details", this.el);
    this.productMessages = $(".product-message", this.el);
    this.images = JSON.parse($("[data-images]", this.el).text());
    this.$addToCart = $(".add-to-cart", this.el);
    if (this.imagesLayout === "slideshow") {
      this.productSlideshow = new ProductSlideshowView({
        el: this.productImages
      });
    } else if (this.imagesLayout === "list") {
      this.window.on("load.product-images-list resize.product-images-list", window.ThemeUtils.debounce(this.setupProductDetails, 100));
    } else if (this.imagesLayout === "masonry") {
      this.productMasonryLayout = new ProductMasonryLayoutView({
        el: this.$productContainer
      });
    }
    if (this.imagesLayout === "slideshow" && this.enableZoom) {
      this.zoomView = new ImageZoomView({
        el: this.productMainImage
      });
    }
    ref = this.$el.find(".rte");
    for (i = 0, len = ref.length; i < len; i++) {
      rte = ref[i];
      this.rteViews.push(new RTEView({
        el: rte
      }));
    }
    ref1 = this.$el.find("select");
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      select = ref1[j];
      if (!select.hasAttribute("data-select-ignore")) {
        this.selectViews.push(new SelectView({
          el: select
        }));
      }
    }
    this.setupVariants();
    if (this.enableFixedPositioning) {
      this.positionProductInfo();
    }
    this.$productThumbnails.on("click", (function(_this) {
      return function(event) {
        return _this.swapProductImage(event);
      };
    })(this));
    this.$addToCart.on("click", (function(_this) {
      return function(event) {
        return _this.addToCart(event);
      };
    })(this));
    if (Theme.currencySwitcher) {
      $(".currency-switcher").trigger("switch-currency");
    }
    if ((ref2 = Shopify.PaymentButton) != null) {
      ref2.init();
    }
  }

  Product.prototype.unload = function() {
    var i, j, len, len1, ref, ref1, ref2, ref3, ref4, ref5, ref6, rte, select;
    clearTimeout(this.positionTimeout);
    if ((ref = this.zoomView) != null) {
      ref.remove();
    }
    if ((ref1 = this.variantHelpers) != null) {
      ref1.unload();
    }
    if ((ref2 = this.productSlideshow) != null) {
      ref2.remove();
    }
    if ((ref3 = this.productMasonryLayout) != null) {
      ref3.prepareRemove();
    }
    if ((ref4 = this.productMasonryLayout) != null) {
      ref4.remove();
    }
    ref5 = this.rteViews;
    for (i = 0, len = ref5.length; i < len; i++) {
      rte = ref5[i];
      rte.remove();
    }
    ref6 = this.selectViews;
    for (j = 0, len1 = ref6.length; j < len1; j++) {
      select = ref6[j];
      select.remove();
    }
    return this.window.off(".product-images-list");
  };

  Product.prototype.setupVariants = function() {
    this.$addToCartButton = this.$el.find(".add-to-cart");
    this.$priceArea = this.$el.find(".product-price");
    this.$variantDropdowns = this.$el.find("[data-option-select]");
    this.variantHelpers = new VariantHelper({
      $selector: this.$variantDropdowns,
      type: "select",
      $addToCartButton: this.$addToCartButton,
      $priceFields: this.$priceArea,
      $productForm: this.$productForm,
      $productThumbnails: this.$productThumbnails,
      productSettings: this.productSettings,
      productJSON: this.product
    });
    return this.$variantDropdowns.trigger("change");
  };

  Product.prototype.swapProductImage = function(e) {
    var $image, $nextImage, imageId;
    imageId = $(e.target, this.el).data("image-id");
    $nextImage = $(this.images[imageId]);
    $nextImage.css("display", "none");
    $image = $("[data-product-main-image]", this.el);
    $nextImage.one("load", function() {
      $image.remove();
      return $nextImage.css("display", "");
    });
    $image.after($nextImage);
    return $nextImage.trigger("prepare-zoom");
  };

  Product.prototype.setupProductDetails = function() {
    if (this.imagesLayout !== "list") {
      return;
    }
    return this.productDetails.width(this.productDetailsWrapper.width());
  };

  Product.prototype.positionProductInfo = function() {
    var detailsHeight;
    detailsHeight = this.productDetails.get(0).getBoundingClientRect().height;
    if (window.innerWidth > 770 && document.documentElement.getBoundingClientRect().height > detailsHeight) {
      this.triggerFixedProductInfo();
    } else {
      this.productDetails.removeClass("product-details-fixed").removeClass("product-details-absolute");
    }
    return this.positionTimeout = setTimeout(this.positionProductInfo, 100);
  };

  Product.prototype.triggerFixedProductInfo = function() {
    var detailsHeight, detailsOffsetBottom, detailsOffsetTop, detailsWrapperOffset, imagesHeight, imagesOffsetBottom, imagesOffsetTop, scrollTop;
    if (this.imagesLayout !== "list") {
      return;
    }
    scrollTop = this.window.scrollTop();
    imagesHeight = this.productImages.get(0).getBoundingClientRect().height;
    imagesOffsetTop = this.productImages.offset().top;
    imagesOffsetBottom = imagesOffsetTop + imagesHeight;
    detailsWrapperOffset = this.productDetailsWrapper.offset().top;
    detailsHeight = this.productDetails.get(0).getBoundingClientRect().height;
    detailsOffsetTop = this.productDetails.offset().top;
    detailsOffsetBottom = detailsOffsetTop + detailsHeight;
    if (this.productDetails.get(0).getBoundingClientRect().height < imagesHeight) {
      if (detailsWrapperOffset - scrollTop < 0) {
        if (detailsOffsetBottom < imagesOffsetBottom || scrollTop < detailsOffsetTop) {
          this.productDetails.removeClass("product-details-absolute").addClass("product-details-fixed");
        }
        detailsHeight = this.productDetails.get(0).getBoundingClientRect().height;
        detailsOffsetTop = this.productDetails.offset().top;
        detailsOffsetBottom = detailsOffsetTop + detailsHeight;
        if (detailsOffsetBottom >= imagesOffsetBottom || scrollTop >= detailsOffsetTop) {
          return this.productDetails.removeClass("product-details-fixed").addClass("product-details-absolute");
        }
      } else {
        return this.productDetails.removeClass("product-details-fixed").removeClass("product-details-absolute");
      }
    }
  };

  Product.prototype.addToCart = function(e) {
    e.preventDefault();
    this.productMessages.html("");
    return $.post("/cart/add.js", this.$productForm.serialize(), null, "json").done((function(_this) {
      return function(item) {
        var message;
        message = Theme.addToCartSuccess.replace("**product**", item.title).replace("**cart_link**", "<a href=\"/cart\">\n    {{ 'products.product.cart_link' | t }}\n</a>").replace("**continue_link**", "<a\n    href=\"/collections/all\"\n>\n    {{ 'products.product.continue_link' | t }}\n</a>").replace("**checkout_link**", "<a href=\"/checkout\">\n    {{ 'products.product.checkout_link' | t }}\n</a>");
        return setTimeout(function() {
          _this.productMessages.html(message).addClass("success-message").removeClass("error-message");
          return _this.updateCart(item);
        }, 500);
      };
    })(this)).fail((function(_this) {
      return function(error) {
        return _this.handleErrors(error);
      };
    })(this));
  };

  Product.prototype.updateCart = function(newItem) {
    var miniCartItemWrapper;
    $(".mini-cart").removeClass("empty");
    miniCartItemWrapper = $(".mini-cart-item-wrapper");
    return Shopify.getCart(function(cart) {
      var currencySwitcher, currencyValue, i, image, item, len, price, ref;
      miniCartItemWrapper.empty();
      $("[data-cart-count]").html("<span class=\"cart-count-text\">{{ 'layout.header.cart' | t | escape }}</span>\n(<span class=\"cart-count-number\">" + cart.item_count + "</span>)");
      ref = cart.items;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        price = Shopify.formatMoney(item.price, Theme.moneyFormat);
        image = item.image != null ? item.image : "{{ 'no-image.svg' | asset_url }}";
        miniCartItemWrapper.append("<article\n    class=\"mini-cart-item\"\n    data-variant=\"" + item.variant_id + "\"\n    data-url=\"" + item.url + "\"\n    data-title=\"" + item.title + "\"\n>\n    <figure class=\"mini-cart-item-image\">\n        <a href=\"" + item.url + "\">\n            <img alt=\"" + item.title + "\" src=\"" + image + "\">\n        </a>\n    </figure>\n    <div class=\"mini-cart-item-details\">\n        <p class=\"mini-cart-item-quantity\">\n            {{ 'layout.mini_cart.quantity' | t }}: <span>" + item.quantity + "</span>\n        </p>\n        <p class=\"mini-cart-item-title\">\n            <a href=\"" + item.url + "\">" + item.title + "</a>\n        </p>\n        <p class=\"mini-cart-item-price\">\n            <span class=\"money\">" + price + "</span>\n        </p>\n    </div>\n</article>");
      }
      currencySwitcher = $(".currency-switcher select");
      currencyValue = currencySwitcher.val();
      return currencySwitcher.val(Theme.currency).trigger("reset-currency").val(currencyValue).trigger("reset-currency");
    });
  };

  Product.prototype.handleErrors = function(error) {
    return setTimeout((function(_this) {
      return function() {
        return _this.$el.find(".product-message").html(error.responseJSON.description).addClass("error-message").removeClass("success-message");
      };
    })(this), 1000);
  };

  return Product;

})();

Quickshop = (function() {
  function Quickshop() {
    this.el = document.querySelector("[data-quickshop]");
    this.contentEl = document.querySelector("[data-quickshop-content]");
    this.closeEl = document.querySelector("[data-quickshop-close]");
    this.injectEl = this.el.querySelector("[data-quickshop-product-inject]");
    this.settingsSha256 = this.el.getAttribute("data-quickshop-settings-sha256");
    this.useCaching = !(window.Shopify && window.Shopify.designMode);
    this.deferred = {};
    this.onContentClick = this._onContentClick.bind(this);
    this.onCloseClick = this.close.bind(this);
  }

  Quickshop.prototype.load = function(url, productSha256) {
    var $deferred, data, deserialized;
    if (url in this.deferred) {
      return this.deferred[url];
    }
    $deferred = $.Deferred();
    this.deferred[url] = $deferred;
    if (this.useCaching) {
      data = sessionStorage.getItem(url);
      if (data) {
        deserialized = JSON.parse(data);
        if (productSha256 === deserialized.options.product_sha256 && this.settingsSha256 === deserialized.options.settings_sha256) {
          delete this.deferred[url];
          return $deferred.resolve(deserialized).promise();
        }
      }
    }
    this.url = url;
    $.ajax({
      url: url,
      data: "view=ajax",
      dataType: "html",
      success: (function(_this) {
        return function(data) {
          var el, html, options;
          el = document.createElement("div");
          el.innerHTML = data;
          options = JSON.parse(el.querySelector("[data-product-options]").innerHTML);
          html = el.querySelector("[data-product-html]").innerHTML;
          if (_this.useCaching) {
            try {
              sessionStorage.setItem(url, JSON.stringify({
                options: options,
                html: html
              }));
            } catch (error1) {

            }
          }
          delete _this.deferred[url];
          return $deferred.resolve({
            options: options,
            html: html
          });
        };
      })(this),
      error: (function(_this) {
        return function(jqXHR, textStatus, errorThrown) {
          delete _this.deferred[url];
          return $deferred.reject();
        };
      })(this)
    });
    return $deferred.promise();
  };

  Quickshop.prototype.open = function(url, productSha256) {
    var $deferred;
    $deferred = $.Deferred();
    this.el.addEventListener("click", this.onCloseClick);
    this.contentEl.addEventListener("click", this.onContentClick);
    this.closeEl.addEventListener("click", this.onCloseClick);
    this.el.classList.add("quickshop-visible");
    this.load(url, productSha256).done((function(_this) {
      return function(data) {
        _this.injectEl.innerHTML = data.html;
        _this.product = new Product(_this.injectEl, data.options);
        _this.el.classList.add("quickshop-loaded");
        return $deferred.resolve();
      };
    })(this)).fail($deferred.reject());
    return $deferred.promise();
  };

  Quickshop.prototype.close = function() {
    var ref;
    if ((ref = this.product) != null) {
      ref.unload();
    }
    this.el.removeEventListener("click", this.onCloseClick);
    this.contentEl.removeEventListener("click", this.onContentClick);
    this.closeEl.removeEventListener("click", this.onCloseClick);
    this.el.classList.remove("quickshop-loaded");
    return this.el.classList.remove("quickshop-visible");
  };

  Quickshop.prototype.unload = function() {
    return this.close();
  };

  Quickshop.prototype._onContentClick = function(e) {
    return e.stopPropagation();
  };

  return Quickshop;

})();

window.ProductListItemView = (function(superClass) {
  extend(ProductListItemView, superClass);

  function ProductListItemView() {
    return ProductListItemView.__super__.constructor.apply(this, arguments);
  }

  ProductListItemView.prototype.events = {
    "click .product-list-item-thumbnail": "redirectToProduct",
    "click .quick-shop-modal-trigger": "openQuickShop",
    "mouseover .quick-shop-modal-trigger": "preloadQuickshop"
  };

  ProductListItemView.prototype.initialize = function() {
    this.productHover = $('[data-product-hover]').data('product-hover');
    if (this.productHover === 'quick-shop' || this.productHover === 'stock-level') {
      this.centerProductItemOverlay();
    }
    if (this.productHover === 'quick-shop') {
      return this.quickshop = new Quickshop();
    }
  };

  ProductListItemView.prototype.centerProductItemOverlay = function() {
    var trigger;
    if (this.productHover === 'quick-shop') {
      return trigger = this.$(".quick-shop-modal-trigger");
    } else if (this.productHover === 'stock-level') {
      return trigger = this.$(".product-list-item-inventory");
    }
  };

  ProductListItemView.prototype.redirectToProduct = function(e) {
    var $target, isSlider, url;
    $target = $(e.target);
    url = !$target.hasClass('quick-shop-modal-trigger') ? $target.data('url') : null;
    isSlider = $target.closest('.flickity-slider').length;
    if (isSlider) {
      return;
    }
    if (url) {
      return window.location = url;
    }
  };

  ProductListItemView.prototype.openQuickShop = function(e) {
    var productSha256, productUrl;
    productUrl = e.currentTarget.getAttribute("data-product-url");
    productSha256 = e.currentTarget.getAttribute("data-product-sha256");
    return this.quickshop.open(productUrl, productSha256);
  };

  ProductListItemView.prototype.preloadQuickshop = function(e) {
    var productSha256, productUrl;
    productUrl = e.currentTarget.getAttribute("data-product-url");
    productSha256 = e.currentTarget.getAttribute("data-product-sha256");
    return this.quickshop.load(productUrl, productSha256);
  };

  return ProductListItemView;

})(Backbone.View);

window.HomeProductsView = (function(superClass) {
  extend(HomeProductsView, superClass);

  function HomeProductsView() {
    this._flickity = bind(this._flickity, this);
    return HomeProductsView.__super__.constructor.apply(this, arguments);
  }

  HomeProductsView.prototype.initialize = function() {
    this.$window = $(window);
    this.productViews = [];
    this.$container = this.$('[data-products-container]');
    this.slide = '.product-list-item';
    this.flickity = null;
    this._setupProducts();
    this._bindEvents();
    return this._flickity();
  };

  HomeProductsView.prototype.prepareRemove = function() {
    var i, len, productView, ref, results;
    this.$window.off('resize.home-featured-collections');
    this._destroyFlickity();
    if (this.productViews.length) {
      ref = this.productViews;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        productView = ref[i];
        results.push(productView.remove());
      }
      return results;
    }
  };

  HomeProductsView.prototype._bindEvents = function() {
    return this.$window.on('resize.home-featured-collections', window.ThemeUtils.debounce(this._flickity, 100));
  };

  HomeProductsView.prototype._setupProducts = function() {
    var i, len, productItem, ref, results;
    ref = $(".product-list-item", this.$el);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      productItem = ref[i];
      results.push(this.productViews.push(new ProductListItemView({
        el: productItem
      })));
    }
    return results;
  };

  HomeProductsView.prototype._flickity = function() {
    if (!this.$container.length) {
      return;
    }
    if (!window.ThemeUtils.isSmall()) {
      return this._destroyFlickity();
    }
    if (this.flickity) {
      return;
    }
    this.flickity = new Flickity(this.$container[0], {
      cellAlign: 'left',
      cellSelector: this.slide,
      contain: false,
      prevNextButtons: false,
      pageDots: false,
      imagesLoaded: true,
      setGallerySize: false
    });
    return this._flickityEvents();
  };

  HomeProductsView.prototype._destroyFlickity = function() {
    if (this.flickity) {
      this.flickity.destroy();
      this.flickity = null;
      this.$window.off('resize.home-featured-collections-flickity');
      return this.$container.off('home-featured-collections-height');
    }
  };

  HomeProductsView.prototype._flickityEvents = function() {
    this.flickity.on('cellSelect', (function(_this) {
      return function() {
        return _this.$container.trigger('home-featured-collections-height');
      };
    })(this));
    this.flickity.on('settle', (function(_this) {
      return function() {
        return _this.$container.trigger('home-featured-collections-height');
      };
    })(this));
    this.$container.on('home-featured-collections-height', (function(_this) {
      return function() {
        return window.ThemeUtils.flickityResize(_this.flickity);
      };
    })(this));
    this.$container.trigger('home-featured-collections-height');
    return this.$window.on('resize.home-featured-collections-flickity', window.ThemeUtils.debounce((function(_this) {
      return function() {
        return _this.$container.trigger('home-featured-collections-height');
      };
    })(this), 10));
  };

  return HomeProductsView;

})(Backbone.View);

window.HomeInstagramWidgetView = (function(superClass) {
  extend(HomeInstagramWidgetView, superClass);

  function HomeInstagramWidgetView() {
    return HomeInstagramWidgetView.__super__.constructor.apply(this, arguments);
  }

  HomeInstagramWidgetView.prototype.initialize = function() {
    this.initializedClass = 'instagram-initialized';
    return this._validate();
  };

  HomeInstagramWidgetView.prototype._validate = function() {
    var accessToken, isInitialized, photoCount;
    this.$photoContainer = $("[data-instagram-photos]", this.$el);
    accessToken = $('[data-instagram-token]', this.$el).attr('data-instagram-token');
    photoCount = $('[data-instagram-photo-count]', this.$el).attr('data-instagram-photo-count');
    isInitialized = this.$el.hasClass(this.initializedClass);
    return this._getPhotos(accessToken, photoCount, isInitialized);
  };

  HomeInstagramWidgetView.prototype._getPhotos = function(accessToken, photoCount, isInitialized) {
    var url;
    if (!accessToken.length) {
      return this._hasError(false);
    }
    if (isInitialized) {
      return;
    }
    url = "https://api.instagram.com/v1/users/self/media/recent?access_token=" + accessToken + "&count=" + photoCount + "&callback=";
    return $.ajax({
      type: "GET",
      dataType: "jsonp",
      url: url,
      success: (function(_this) {
        return function(response) {
          var i, len, photo, ref, ref1, ref2, results;
          if (response.meta.code === 200) {
            _this.$photoContainer.empty();
            ref = response.data;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              photo = ref[i];
              if (photo != null ? (ref1 = photo.images) != null ? (ref2 = ref1.standard_resolution) != null ? ref2.url : void 0 : void 0 : void 0) {
                results.push(_this.$photoContainer.append("<a\n    class=\"instagram-photo\"\n    target=\"_blank\"\n    href=\"" + photo.link + "\"\n    style=\"background-image: url('" + photo.images.standard_resolution.url + "')\"\n>\n</a>"));
              } else {
                results.push(void 0);
              }
            }
            return results;
          } else {
            _this.$photoContainer.append("<div class='instagram-error'>Instagram error: " + response.meta.error_message + "</div>");
            return console.log("Instagram error: " + response.meta.error_message);
          }
        };
      })(this),
      error: (function(_this) {
        return function(response) {
          _this.$photoContainer.empty();
          return console.log("Instagram error: " + response.meta.error_message);
        };
      })(this)
    });
  };

  HomeInstagramWidgetView.prototype._hasError = function(response) {
    this.$el.toggleClass(this.initializedClass, false);
    if (response) {
      return console.log("Instagram error: " + response.meta.error_message);
    }
  };

  HomeInstagramWidgetView.prototype.update = function($el) {
    this.$el = $el;
    return this._validate();
  };

  return HomeInstagramWidgetView;

})(Backbone.View);


/*********************************************************************
*  #### Twitter Post Fetcher v17.0.3 ####
*  Coded by Jason Mayes 2015. A present to all the developers out there.
*  www.jasonmayes.com
*  Please keep this disclaimer with my code if you use it. Thanks. :-)
*  Got feedback or questions, ask here:
*  http://www.jasonmayes.com/projects/twitterApi/
*  Github: https://github.com/jasonmayes/Twitter-Post-Fetcher
*  Updates will be posted to this site.
*********************************************************************/
(function(root,factory){if(typeof define==='function'&&define.amd){define([],factory);}else if(typeof exports==='object'){module.exports=factory();}else{factory();}}(this,function(){var domNode='';var maxTweets=20;var parseLinks=true;var queue=[];var inProgress=false;var printTime=true;var printUser=true;var formatterFunction=null;var supportsClassName=true;var showRts=true;var customCallbackFunction=null;var showInteractionLinks=true;var showImages=false;var useEmoji=false;var targetBlank=true;var lang='en';var permalinks=true;var dataOnly=false;var script=null;var scriptAdded=false;function handleTweets(tweets){if(customCallbackFunction===null){var x=tweets.length;var n=0;var element=document.getElementById(domNode);var html='<ul>';while(n<x){html+='<li>'+tweets[n]+'</li>';n++;}
html+='</ul>';element.innerHTML=html;}else{customCallbackFunction(tweets);}}
function strip(data){return data.replace(/<b[^>]*>(.*?)<\/b>/gi,function(a,s){return s;}).replace(/class="(?!(tco-hidden|tco-display|tco-ellipsis))+.*?"|data-query-source=".*?"|dir=".*?"|rel=".*?"/gi,'');}
function targetLinksToNewWindow(el){var links=el.getElementsByTagName('a');for(var i=links.length-1;i>=0;i--){links[i].setAttribute('target','_blank');}}
function getElementsByClassName(node,classname){var a=[];var regex=new RegExp('(^| )'+classname+'( |$)');var elems=node.getElementsByTagName('*');for(var i=0,j=elems.length;i<j;i++){if(regex.test(elems[i].className)){a.push(elems[i]);}}
return a;}
function extractImageUrl(image_data){if(image_data!==undefined&&image_data.innerHTML.indexOf('data-image')>=0){var data_src=image_data.innerHTML.match(/data-image=\"([A-z0-9]+:\/\/[A-z0-9]+\.[A-z0-9]+\.[A-z0-9]+\/[A-z0-9]+\/[A-z0-9\-]+)/i)[1];return decodeURIComponent(data_src)+'.jpg';}}
var twitterFetcher={fetch:function(config){if(config.maxTweets===undefined){config.maxTweets=20;}
if(config.enableLinks===undefined){config.enableLinks=true;}
if(config.showUser===undefined){config.showUser=true;}
if(config.showTime===undefined){config.showTime=true;}
if(config.dateFunction===undefined){config.dateFunction='default';}
if(config.showRetweet===undefined){config.showRetweet=true;}
if(config.customCallback===undefined){config.customCallback=null;}
if(config.showInteraction===undefined){config.showInteraction=true;}
if(config.showImages===undefined){config.showImages=false;}
if(config.useEmoji===undefined){config.useEmoji=false;}
if(config.linksInNewWindow===undefined){config.linksInNewWindow=true;}
if(config.showPermalinks===undefined){config.showPermalinks=true;}
if(config.dataOnly===undefined){config.dataOnly=false;}
if(inProgress){queue.push(config);}else{inProgress=true;domNode=config.domId;maxTweets=config.maxTweets;parseLinks=config.enableLinks;printUser=config.showUser;printTime=config.showTime;showRts=config.showRetweet;formatterFunction=config.dateFunction;customCallbackFunction=config.customCallback;showInteractionLinks=config.showInteraction;showImages=config.showImages;useEmoji=config.useEmoji;targetBlank=config.linksInNewWindow;permalinks=config.showPermalinks;dataOnly=config.dataOnly;var head=document.getElementsByTagName('head')[0];if(script!==null){head.removeChild(script);}
script=document.createElement('script');script.type='text/javascript';if(config.list!==undefined){script.src='https://syndication.twitter.com/timeline/list?'+'callback=__twttrf.callback&dnt=false&list_slug='+
config.list.listSlug+'&screen_name='+config.list.screenName+'&suppress_response_codes=true&lang='+(config.lang||lang)+'&rnd='+Math.random();}else if(config.profile!==undefined){script.src='https://syndication.twitter.com/timeline/profile?'+'callback=__twttrf.callback&dnt=false'+'&screen_name='+config.profile.screenName+'&suppress_response_codes=true&lang='+(config.lang||lang)+'&rnd='+Math.random();}else if(config.likes!==undefined){script.src='https://syndication.twitter.com/timeline/likes?'+'callback=__twttrf.callback&dnt=false'+'&screen_name='+config.likes.screenName+'&suppress_response_codes=true&lang='+(config.lang||lang)+'&rnd='+Math.random();}else{script.src='https://cdn.syndication.twimg.com/widgets/timelines/'+
config.id+'?&lang='+(config.lang||lang)+'&callback=__twttrf.callback&'+'suppress_response_codes=true&rnd='+Math.random();}
head.appendChild(script);}},callback:function(data){if(data===undefined||data.body===undefined){inProgress=false;if(queue.length>0){twitterFetcher.fetch(queue[0]);queue.splice(0,1);}
return;}
if(!useEmoji){data.body=data.body.replace(/(<img[^c]*class="Emoji[^>]*>)|(<img[^c]*class="u-block[^>]*>)/g,'');}
if(!showImages){data.body=data.body.replace(/(<img[^c]*class="NaturalImage-image[^>]*>|(<img[^c]*class="CroppedImage-image[^>]*>))/g,'');}
if(!printUser){data.body=data.body.replace(/(<img[^c]*class="Avatar"[^>]*>)/g,'');}
var div=document.createElement('div');div.innerHTML=data.body;if(typeof(div.getElementsByClassName)==='undefined'){supportsClassName=false;}
function swapDataSrc(element){var avatarImg=element.getElementsByTagName('img')[0];if(avatarImg && avatarImg.length){avatarImg.src=avatarImg.getAttribute('data-src-2x');}return element;}
var tweets=[];var authors=[];var times=[];var images=[];var rts=[];var tids=[];var permalinksURL=[];var x=0;if(supportsClassName){var tmp=div.getElementsByClassName('timeline-Tweet');while(x<tmp.length){if(tmp[x].getElementsByClassName('timeline-Tweet-retweetCredit').length>0){rts.push(true);}else{rts.push(false);}
if(!rts[x]||rts[x]&&showRts){tweets.push(tmp[x].getElementsByClassName('timeline-Tweet-text')[0]);tids.push(tmp[x].getAttribute('data-tweet-id'));if(printUser){authors.push(swapDataSrc(tmp[x].getElementsByClassName('timeline-Tweet-author')[0]));}
times.push(tmp[x].getElementsByClassName('dt-updated')[0]);permalinksURL.push(tmp[x].getElementsByClassName('timeline-Tweet-timestamp')[0]);if(tmp[x].getElementsByClassName('timeline-Tweet-media')[0]!==undefined){images.push(tmp[x].getElementsByClassName('timeline-Tweet-media')[0]);}else{images.push(undefined);}}
x++;}}else{var tmp=getElementsByClassName(div,'timeline-Tweet');while(x<tmp.length){if(getElementsByClassName(tmp[x],'timeline-Tweet-retweetCredit').length>0){rts.push(true);}else{rts.push(false);}
if(!rts[x]||rts[x]&&showRts){tweets.push(getElementsByClassName(tmp[x],'timeline-Tweet-text')[0]);tids.push(tmp[x].getAttribute('data-tweet-id'));if(printUser){authors.push(swapDataSrc(getElementsByClassName(tmp[x],'timeline-Tweet-author')[0]));}
times.push(getElementsByClassName(tmp[x],'dt-updated')[0]);permalinksURL.push(getElementsByClassName(tmp[x],'timeline-Tweet-timestamp')[0]);if(getElementsByClassName(tmp[x],'timeline-Tweet-media')[0]!==undefined){images.push(getElementsByClassName(tmp[x],'timeline-Tweet-media')[0]);}else{images.push(undefined);}}
x++;}}
if(tweets.length>maxTweets){tweets.splice(maxTweets,(tweets.length-maxTweets));authors.splice(maxTweets,(authors.length-maxTweets));times.splice(maxTweets,(times.length-maxTweets));rts.splice(maxTweets,(rts.length-maxTweets));images.splice(maxTweets,(images.length-maxTweets));permalinksURL.splice(maxTweets,(permalinksURL.length-maxTweets));}
var arrayTweets=[];var x=tweets.length;var n=0;if(dataOnly){while(n<x){arrayTweets.push({tweet:tweets[n].innerHTML,author:authors[n]?authors[n].innerHTML:'Unknown Author',author_data:{profile_url:authors[n]?authors[n].querySelector('[data-scribe="element:user_link"]').href:null,profile_image:authors[n]?authors[n].querySelector('[data-scribe="element:avatar"]').getAttribute('data-src-1x'):null,profile_image_2x:authors[n]?authors[n].querySelector('[data-scribe="element:avatar"]').getAttribute('data-src-2x'):null,screen_name:authors[n]?authors[n].querySelector('[data-scribe="element:screen_name"]').title:null,name:authors[n]?authors[n].querySelector('[data-scribe="element:name"]').title:null},time:times[n].textContent,timestamp:times[n].getAttribute('datetime').replace('+0000','Z').replace(/([\+\-])(\d\d)(\d\d)/,'$1$2:$3'),image:extractImageUrl(images[n]),rt:rts[n],tid:tids[n],permalinkURL:(permalinksURL[n]===undefined)?'':permalinksURL[n].href});n++;}}else{while(n<x){if(typeof(formatterFunction)!=='string'){var datetimeText=times[n].getAttribute('datetime');var newDate=new Date(times[n].getAttribute('datetime').replace(/-/g,'/').replace('T',' ').split('+')[0]);var dateString=formatterFunction(newDate,datetimeText);times[n].setAttribute('aria-label',dateString);if(tweets[n].textContent){if(supportsClassName){times[n].textContent=dateString;}else{var h=document.createElement('p');var t=document.createTextNode(dateString);h.appendChild(t);h.setAttribute('aria-label',dateString);times[n]=h;}}else{times[n].textContent=dateString;}}
var op='';if(parseLinks){if(targetBlank){targetLinksToNewWindow(tweets[n]);if(printUser){targetLinksToNewWindow(authors[n]);}}
if(printUser){op+='<div class="user">'+strip(authors[n].innerHTML)+'</div>';}
op+='<p class="tweet">'+strip(tweets[n].innerHTML)+'</p>';if(printTime){if(permalinks){op+='<p class="timePosted"><a href="'+permalinksURL[n]+'">'+times[n].getAttribute('aria-label')+'</a></p>';}else{op+='<p class="timePosted">'+
times[n].getAttribute('aria-label')+'</p>';}}}else{if(tweets[n].textContent){if(printUser){op+='<p class="user">'+authors[n].textContent+'</p>';}
op+='<p class="tweet">'+tweets[n].textContent+'</p>';if(printTime){op+='<p class="timePosted">'+times[n].textContent+'</p>';}}else{if(printUser){op+='<p class="user">'+authors[n].textContent+'</p>';}
op+='<p class="tweet">'+tweets[n].textContent+'</p>';if(printTime){op+='<p class="timePosted">'+times[n].textContent+'</p>';}}}
if(showInteractionLinks){op+='<p class="interact"><a href="https://twitter.com/intent/'+'tweet?in_reply_to='+tids[n]+'" class="twitter_reply_icon"'+
(targetBlank?' target="_blank">':'>')+'Reply</a><a href="https://twitter.com/intent/retweet?'+'tweet_id='+tids[n]+'" class="twitter_retweet_icon"'+
(targetBlank?' target="_blank">':'>')+'Retweet</a>'+'<a href="https://twitter.com/intent/favorite?tweet_id='+
tids[n]+'" class="twitter_fav_icon"'+
(targetBlank?' target="_blank">':'>')+'Favorite</a></p>';}
if(showImages&&images[n]!==undefined&&extractImageUrl(images[n])!==undefined){op+='<div class="media">'+'<img src="'+extractImageUrl(images[n])+'" alt="Image from tweet" />'+'</div>';}
if(showImages){arrayTweets.push(op);}else if(!showImages&&tweets[n].textContent.length){arrayTweets.push(op);}
n++;}}
handleTweets(arrayTweets);inProgress=false;if(queue.length>0){twitterFetcher.fetch(queue[0]);queue.splice(0,1);}}};window.__twttrf=twitterFetcher;window.twitterFetcher=twitterFetcher;return twitterFetcher;}));

;

window.HomeTwitterWidgetView = (function(superClass) {
  extend(HomeTwitterWidgetView, superClass);

  function HomeTwitterWidgetView() {
    this._renderTweets = bind(this._renderTweets, this);
    return HomeTwitterWidgetView.__super__.constructor.apply(this, arguments);
  }

  HomeTwitterWidgetView.prototype.initialize = function() {
    this.initializedClass = 'twitter-initialized';
    return this._validate();
  };

  HomeTwitterWidgetView.prototype._validate = function() {
    var isInitialized, showImages, showRetweets;
    this.$tweetContainer = $("[data-twitter-tweets]", this.$el);
    this.username = $("[data-twitter-username]", this.$el).attr("data-twitter-username");
    showRetweets = $("[data-twitter-show-retweets]", this.$el).length;
    showImages = $("[data-twitter-show-images]", this.$el).length;
    isInitialized = this.$el.hasClass(this.initializedClass) && this.$tweetContainer.length;
    return this._getTweets(showRetweets, showImages, isInitialized);
  };

  HomeTwitterWidgetView.prototype._getTweets = function(showRetweets, showImages, isInitialized) {
    var config;
    if (!this.username.length) {
      return this._hasError(false);
    }
    if (isInitialized) {
      return;
    }
    config = {
      "profile": {
        "screenName": this.username
      },
      "maxTweets": 1,
      "enableLinks": true,
      "showUser": true,
      "showTime": true,
      "showRetweet": showRetweets,
      "showImages": showImages,
      "showInteraction": true,
      "customCallback": this._renderTweets,
      "showInteraction": false,
      "useEmoji": true
    };
    return twitterFetcher.fetch(config);
  };

  HomeTwitterWidgetView.prototype._renderTweets = function(tweets) {
    var i, len, media, timestamp, tweet, user;
    if (tweets.length) {
      this.$("[data-tweet]", this.$tweetContainer).empty();
      for (i = 0, len = tweets.length; i < len; i++) {
        tweet = tweets[i];
        tweet = $(tweet);
        this.$("[data-tweet]", this.$tweetContainer).append(tweet);
      }
      media = this.$(".media");
      user = this.$(".user");
      this.$("[data-tweet]", this.$tweetContainer).prepend(media);
      this.$("[data-tweet]", this.$tweetContainer).prepend(user);
      if (("@" + (this.username.toLowerCase())) !== this.$('[data-scribe="element:screen_name"]').text().toLowerCase()) {
        this.$('[data-scribe="element:user_link"]').prepend('<svg class="retweet-svg" viewBox="0 0 32 32"> <path class="path1" d="M4 10h20v6l8-8-8-8v6h-24v12h4zM28 22h-20v-6l-8 8 8 8v-6h24v-12h-4z"></path> </svg>');
      }
      timestamp = this.$(".timePosted").text().split(" ");
      return this.$(".timePosted").prepend("<span class='twitter-icon'>&#xF12E;</span>");
    } else {
      return console.log("No tweets to display. Most probable cause is an incorrectly entered Widget ID.");
    }
  };

  HomeTwitterWidgetView.prototype._hasError = function(response) {
    this.$el.toggleClass(this.initializedClass, false);
    this.$tweetContainer.html();
    if (response) {
      return console.log("Twitter error: " + response.meta.error_message);
    }
  };

  HomeTwitterWidgetView.prototype.update = function($el) {
    this.$el = $el;
    return this._validate();
  };

  return HomeTwitterWidgetView;

})(Backbone.View);

window.HomeSocialWidgetsView = (function(superClass) {
  extend(HomeSocialWidgetsView, superClass);

  function HomeSocialWidgetsView() {
    return HomeSocialWidgetsView.__super__.constructor.apply(this, arguments);
  }

  HomeSocialWidgetsView.prototype.initialize = function() {
    if ($('[data-instagram]', this.$el).length) {
      this.instagram = new HomeInstagramWidgetView({
        el: this.$el
      });
    }
    if ($('[data-twitter]', this.$el).length) {
      return this.twitter = new HomeTwitterWidgetView({
        el: this.$el
      });
    }
  };

  HomeSocialWidgetsView.prototype.update = function($el) {
    this.$el = $el;
    if (this.instagram) {
      this.instagram.update(this.$el);
    }
    if (this.twitter) {
      return this.twitter.update(this.$el);
    }
  };

  HomeSocialWidgetsView.prototype.remove = function() {
    this.instagram = null;
    return this.twitter = null;
  };

  return HomeSocialWidgetsView;

})(Backbone.View);

window.HomeVideoWithTextOverlay = (function(superClass) {
  extend(HomeVideoWithTextOverlay, superClass);

  function HomeVideoWithTextOverlay() {
    return HomeVideoWithTextOverlay.__super__.constructor.apply(this, arguments);
  }

  HomeVideoWithTextOverlay.prototype.events = {
    'click [data-play-video]': 'playVideo'
  };

  HomeVideoWithTextOverlay.prototype.playVideo = function() {
    var $overlay, $video, delimiter, videoSrc, videoSrcNew;
    $overlay = this.$el.find('[data-video-overlay]');
    $video = this.$el.find('iframe');
    if (!$video.length) {
      return;
    }
    videoSrc = $video.attr('src');
    delimiter = (videoSrc != null ? videoSrc.indexOf('?') : void 0) === -1 ? '?' : '&';
    videoSrcNew = "" + videoSrc + delimiter + "autoplay=1";
    $video.attr('src', videoSrcNew);
    return setTimeout((function(_this) {
      return function() {
        return $overlay.addClass('overlay-inactive').one('trend', function() {
          return $overlay.remove();
        });
      };
    })(this), 100);
  };

  HomeVideoWithTextOverlay.prototype.prepareRemove = function() {
    var ref;
    return (ref = this.video) != null ? ref.remove() : void 0;
  };

  return HomeVideoWithTextOverlay;

})(Backbone.View);

window.HomeTestimonialsView = (function(superClass) {
  extend(HomeTestimonialsView, superClass);

  function HomeTestimonialsView() {
    this._flickity = bind(this._flickity, this);
    return HomeTestimonialsView.__super__.constructor.apply(this, arguments);
  }

  HomeTestimonialsView.prototype.initialize = function() {
    this.container = 'data-testimonials-container';
    this.slide = 'data-testimonial-item';
    this.$window = $(window);
    this.$testimonialsContainer = this.$el.find("[" + this.container + "]");
    this.flickity = null;
    this._bindEvents();
    return this._flickity();
  };

  HomeTestimonialsView.prototype.prepareRemove = function() {
    this.$window.off('resize.testimonials');
    return this._destroyFlickity();
  };

  HomeTestimonialsView.prototype._bindEvents = function() {
    return this.$window.on('resize.testimonials', window.ThemeUtils.debounce(this._flickity, 100));
  };

  HomeTestimonialsView.prototype._flickity = function() {
    if (!this.$testimonialsContainer.length) {
      return;
    }
    if (!window.ThemeUtils.isSmall()) {
      return this._destroyFlickity();
    }
    if (this.flickity) {
      return;
    }
    return this.flickity = new Flickity(this.$testimonialsContainer[0], {
      cellAlign: 'center',
      cellSelector: "[" + this.slide + "]",
      contain: true,
      prevNextButtons: false,
      pageDots: false,
      imagesLoaded: true
    });
  };

  HomeTestimonialsView.prototype._destroyFlickity = function() {
    if (this.flickity) {
      this.flickity.destroy();
      return this.flickity = null;
    }
  };

  HomeTestimonialsView.prototype.onBlockSelect = function(event) {
    var index;
    if (!this.flickity) {
      return;
    }
    index = parseInt($(event.target).attr(this.slide), 10) - 1;
    return this.flickity.select(index, true);
  };

  return HomeTestimonialsView;

})(Backbone.View);

window.HomeBlogView = (function(superClass) {
  extend(HomeBlogView, superClass);

  function HomeBlogView() {
    this._flickity = bind(this._flickity, this);
    return HomeBlogView.__super__.constructor.apply(this, arguments);
  }

  HomeBlogView.prototype.initialize = function() {
    this.container = 'data-blog-container';
    this.slide = '.home-blog-post';
    this.$window = $(window);
    this.$container = this.$el.find("[" + this.container + "]");
    this.flickity = null;
    this._bindEvents();
    return this._flickity();
  };

  HomeBlogView.prototype.prepareRemove = function() {
    this.$window.off('resize.home-blog-posts');
    return this._destroyFlickity();
  };

  HomeBlogView.prototype._bindEvents = function() {
    return this.$window.on('resize.home-blog-posts', window.ThemeUtils.debounce(this._flickity, 100));
  };

  HomeBlogView.prototype._flickity = function() {
    if (!this.$container.length) {
      return;
    }
    if (!window.ThemeUtils.isSmall()) {
      return this._destroyFlickity();
    }
    if (this.flickity) {
      return;
    }
    this.flickity = new Flickity(this.$container[0], {
      cellAlign: 'left',
      cellSelector: this.slide,
      contain: false,
      prevNextButtons: false,
      pageDots: false,
      imagesLoaded: true,
      setGallerySize: false
    });
    return this._flickityEvents();
  };

  HomeBlogView.prototype._destroyFlickity = function() {
    if (this.flickity) {
      this.flickity.destroy();
      this.flickity = null;
      this.$window.off('resize.home-blog-posts-flickity');
      return this.$container.off('home-blog-posts-height');
    }
  };

  HomeBlogView.prototype._flickityEvents = function() {
    this.flickity.on('cellSelect', (function(_this) {
      return function() {
        return _this.$container.trigger('home-blog-posts-height');
      };
    })(this));
    this.flickity.on('settle', (function(_this) {
      return function() {
        return _this.$container.trigger('home-blog-posts-height');
      };
    })(this));
    this.$container.on('home-blog-posts-height', (function(_this) {
      return function() {
        return window.ThemeUtils.flickityResize(_this.flickity);
      };
    })(this));
    this.$container.trigger('home-blog-posts-height');
    return this.$window.on('resize.home-blog-posts-flickity', window.ThemeUtils.debounce((function(_this) {
      return function() {
        return _this.$container.trigger('home-blog-posts-height');
      };
    })(this), 10));
  };

  return HomeBlogView;

})(Backbone.View);

window.HomeView = (function(superClass) {
  extend(HomeView, superClass);

  function HomeView() {
    return HomeView.__super__.constructor.apply(this, arguments);
  }

  HomeView.prototype.initialize = function() {
    return this.sectionBinding();
  };

  HomeView.prototype.sectionBinding = function() {
    this.sections = new ThemeEditor();
    this.sections.register('home-slideshow', this.homeSlideshow(this.sections));
    this.sections.register('home-masonry', this.homeMasonry(this.sections));
    this.sections.register('home-masonry-alternative', this.homeMasonryAlternative(this.sections));
    this.sections.register('home-collection-list', this.collectionList(this.sections));
    this.sections.register('home-featured-collection', this.featuredCollection(this.sections));
    this.sections.register('home-social-widgets', this.socialWidgets(this.sections));
    this.sections.register('home-testimonials', this.testimonials(this.sections));
    this.sections.register('home-video-with-text-overlay', this.videoWithTextOverlay(this.sections));
    return this.sections.register('home-blog', this.homeBlog(this.sections));
  };

  HomeView.prototype.homeSlideshow = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new HomeSlideshowView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onBlockSelect: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        return (ref = this.instances[instance.sectionId]) != null ? ref.onBlockSelect(event) : void 0;
      },
      onSectionUnload: function(event) {
        var instance, ref, ref1;
        instance = sections.getInstance(event);
        if ((ref = this.instances[instance.sectionId]) != null) {
          ref.unload();
        }
        if ((ref1 = this.instances[instance.sectionId]) != null) {
          ref1.remove();
        }
        return delete this.instances[instance.sectionId];
      }
    };
  };

  HomeView.prototype.homeMasonry = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new HomeMasonryView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionSelect: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        return (ref = this.instances[instance.sectionId]) != null ? ref.update(instance.$container) : void 0;
      },
      onSectionDeselect: function(event) {
        return this.onSectionSelect(event);
      },
      onSectionUnload: function(event) {
        var instance;
        instance = sections.getInstance(event);
        this.instances[instance.sectionId].prepareRemove();
        this.instances[instance.sectionId].remove();
        return delete this.instances[instance.sectionId];
      }
    };
  };

  HomeView.prototype.homeMasonryAlternative = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new HomeMasonryAlternativeView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionSelect: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        return (ref = this.instances[instance.sectionId]) != null ? ref.update(instance.$container) : void 0;
      },
      onSectionDeselect: function(event) {
        return this.onSectionSelect(event);
      },
      onSectionUnload: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        if ((ref = this.instances[instance.sectionId]) != null) {
          ref.remove();
        }
        return delete this.instances[instance.sectionId];
      }
    };
  };

  HomeView.prototype.socialWidgets = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new HomeSocialWidgetsView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionSelect: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        return (ref = this.instances[instance.sectionId]) != null ? ref.update(instance.$container) : void 0;
      },
      onSectionDeselect: function(event) {
        return this.onSectionSelect(event);
      },
      onSectionUnload: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        if ((ref = this.instances[instance.sectionId]) != null) {
          ref.remove();
        }
        return delete this.instances[instance.sectionId];
      }
    };
  };

  HomeView.prototype.collectionList = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new HomeCollectionsView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionSelect: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        return (ref = this.instances[instance.sectionId]) != null ? ref.update(instance.$container) : void 0;
      },
      onSectionDeselect: function(event) {
        return this.onSectionSelect(event);
      },
      onSectionUnload: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        if ((ref = this.instances[instance.sectionId]) != null) {
          ref.remove();
        }
        return delete this.instances[instance.sectionId];
      },
      onBlockSelect: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        return (ref = this.instances[instance.sectionId]) != null ? ref.onBlockSelect(event) : void 0;
      },
      onBlockDeselect: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        return (ref = this.instances[instance.sectionId]) != null ? ref.onBlockDeselect(event) : void 0;
      }
    };
  };

  HomeView.prototype.featuredCollection = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new HomeProductsView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionUnload: function(event) {
        var instance, ref, ref1;
        instance = sections.getInstance(event);
        if ((ref = this.instances[instance.sectionId]) != null) {
          ref.prepareRemove();
        }
        if ((ref1 = this.instances[instance.sectionId]) != null) {
          ref1.remove();
        }
        return delete this.instances[instance.sectionId];
      }
    };
  };

  HomeView.prototype.socialWidgets = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new HomeSocialWidgetsView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionSelect: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        return (ref = this.instances[instance.sectionId]) != null ? ref.update(instance.$container) : void 0;
      },
      onSectionDeselect: function(event) {
        return this.onSectionSelect(event);
      },
      onSectionUnload: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        if ((ref = this.instances[instance.sectionId]) != null) {
          ref.remove();
        }
        return delete this.instances[instance.sectionId];
      }
    };
  };

  HomeView.prototype.testimonials = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new HomeTestimonialsView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionSelect: function(event) {
        return this.onSectionLoad(event);
      },
      onSectionUnload: function(event) {
        var instance;
        instance = sections.getInstance(event);
        this.instances[instance.sectionId].prepareRemove();
        this.instances[instance.sectionId].remove();
        return delete this.instances[instance.sectionId];
      },
      onBlockSelect: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        return (ref = this.instances[instance.sectionId]) != null ? ref.onBlockSelect(event) : void 0;
      }
    };
  };

  HomeView.prototype.videoWithTextOverlay = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new HomeVideoWithTextOverlay({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionSelect: function(event) {
        return this.onSectionLoad(event);
      },
      onSectionUnload: function(event) {
        var instance;
        instance = sections.getInstance(event);
        this.instances[instance.sectionId].prepareRemove();
        this.instances[instance.sectionId].remove();
        return delete this.instances[instance.sectionId];
      }
    };
  };

  HomeView.prototype.homeBlog = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new HomeBlogView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionUnload: function(event) {
        var instance;
        instance = sections.getInstance(event);
        this.instances[instance.sectionId].prepareRemove();
        this.instances[instance.sectionId].remove();
        return delete this.instances[instance.sectionId];
      }
    };
  };

  return HomeView;

})(Backbone.View);

window.AccountView = (function(superClass) {
  extend(AccountView, superClass);

  function AccountView() {
    return AccountView.__super__.constructor.apply(this, arguments);
  }

  AccountView.prototype.events = {
    "click .delete-address": "deleteAddress",
    "click .edit-address": "editAddress",
    "click .add-new-address": "addNewAddress",
    "click .toggle-forgetfulness": "recoverPassword",
    "change .address-country": "updateProvinceSelectText"
  };

  AccountView.prototype.initialize = function() {
    var body;
    body = $(document.body);
    if (body.hasClass("template-customers-addresses")) {
      this.prepareAddresses();
    }
    if (body.hasClass("template-customers-login")) {
      this.checkForReset();
    }
    if (window.location.hash === "#recover") {
      return this.recoverPassword();
    }
  };

  AccountView.prototype.recoverPassword = function() {
    this.$(".recover-password").toggle();
    return this.$(".customer-login").toggle();
  };

  AccountView.prototype.checkForReset = function() {
    if (this.$(".reset-check").data("successful-reset") === true) {
      return this.$(".successful-reset").show();
    }
  };

  AccountView.prototype.prepareAddresses = function() {
    var address, addressID, addresses, i, len, results;
    new Shopify.CountryProvinceSelector("address-country", "address-province", {
      hideElement: "address-province-container"
    });
    addresses = this.$(".customer-address");
    if (addresses.length) {
      results = [];
      for (i = 0, len = addresses.length; i < len; i++) {
        address = addresses[i];
        addressID = $(address).data("address-id");
        results.push(new Shopify.CountryProvinceSelector("address-country-" + addressID, "address-province-" + addressID, {
          hideElement: "address-province-container-" + addressID
        }));
      }
      return results;
    }
  };

  AccountView.prototype.deleteAddress = function(e) {
    var addressID;
    addressID = $(e.target).parents("[data-address-id]").data("address-id");
    return Shopify.CustomerAddress.destroy(addressID);
  };

  AccountView.prototype.editAddress = function(e) {
    var addressID;
    addressID = $(e.target).parents("[data-address-id]").data("address-id");
    this.$(".customer-address").removeClass("editing").find(".edit-address").removeClass("disabled");
    this.$(".customer-address[data-address-id='" + addressID + "']").addClass("editing").find(".edit-address").addClass("disabled");
    this.$(".customer-address-edit-form, .customer-new-address").addClass("hidden");
    return this.$(".customer-address-edit-form[data-address-id='" + addressID + "']").removeClass("hidden");
  };

  AccountView.prototype.addNewAddress = function() {
    this.$(".customer-address").removeClass("editing").find(".edit-address").removeClass("disabled");
    this.$(".customer-address-edit-form").addClass("hidden");
    return this.$(".customer-new-address").removeClass("hidden");
  };

  AccountView.prototype.updateProvinceSelectText = function() {
    return this.$(".address-province").siblings(".selected-text").text("-- " + Theme.pleaseSelectText + " --");
  };

  return AccountView;

})(Backbone.View);

window.NotFoundView = (function(superClass) {
  extend(NotFoundView, superClass);

  function NotFoundView() {
    return NotFoundView.__super__.constructor.apply(this, arguments);
  }

  NotFoundView.prototype.events = {};

  NotFoundView.prototype.initialize = function() {};

  return NotFoundView;

})(Backbone.View);

window.PasswordView = (function(superClass) {
  extend(PasswordView, superClass);

  function PasswordView() {
    return PasswordView.__super__.constructor.apply(this, arguments);
  }

  PasswordView.prototype.el = document.body;

  PasswordView.prototype.events = {
    "click": "closeModal",
    "click .admin-login-modal": "openModal"
  };

  PasswordView.prototype.initialize = function() {
    this.modalWrapper = $(".password-page-modal-wrapper");
    this.modalContent = this.modalWrapper.find(".password-page-modal");
    this.openByDefault = this.modalWrapper.find("[data-open-modal]").length;
    if (this.openByDefault) {
      this.openModal();
    }
    return $(window).resize((function(_this) {
      return function() {
        return _this.positionModal();
      };
    })(this));
  };

  PasswordView.prototype.closeModal = function(e) {
    if (this.$(e.target).hasClass("visible")) {
      return this.modalWrapper.removeClass("visible").one("trend", (function(_this) {
        return function() {
          return _this.$el.removeClass("scroll-locked");
        };
      })(this));
    }
  };

  PasswordView.prototype.openModal = function() {
    this.$el.addClass("scroll-locked");
    this.positionModal();
    return this.modalWrapper.addClass("visible");
  };

  PasswordView.prototype.positionModal = function() {
    return this.modalContent.css({
      marginTop: -(this.modalContent.outerHeight() / 2),
      marginLeft: -(this.modalContent.outerWidth() / 2)
    });
  };

  return PasswordView;

})(Backbone.View);

window.GiftCardView = (function(superClass) {
  extend(GiftCardView, superClass);

  function GiftCardView() {
    return GiftCardView.__super__.constructor.apply(this, arguments);
  }

  GiftCardView.prototype.initialize = function() {
    return this.addQrCode();
  };

  GiftCardView.prototype.addQrCode = function() {
    var qrWrapper;
    qrWrapper = $('[data-qr-code]');
    return new QRCode(qrWrapper[0], {
      text: qrWrapper.data('qr-code'),
      width: 120,
      height: 120
    });
  };

  return GiftCardView;

})(Backbone.View);

window.RTEView = (function(superClass) {
  extend(RTEView, superClass);

  function RTEView() {
    return RTEView.__super__.constructor.apply(this, arguments);
  }

  RTEView.prototype.events = {
    "click .tabs li": "switchTabs"
  };

  RTEView.prototype.initialize = function() {
    this.setupTabs();
    return this.resizeVideos();
  };

  RTEView.prototype.switchTabs = function(e) {
    var content, position, tab, tabContainer, tabContentContainer;
    e.preventDefault();
    tab = $(e.currentTarget);
    tabContainer = tab.parent();
    tabContentContainer = tabContainer.next();
    position = tab.index();
    content = tabContentContainer.find("> li").eq(position);
    tabContainer.find("> li").removeClass("active");
    tabContentContainer.find("> li").removeClass("active");
    tab.addClass("active");
    return content.addClass("active");
  };

  RTEView.prototype.setupTabs = function() {
    var tabs;
    tabs = this.$el.find(".tabs");
    tabs.find("li:first").addClass("active");
    return tabs.next().find("li:first").addClass("active");
  };

  RTEView.prototype.resizeVideos = function() {
    var i, len, ref, results, video;
    this.$el.fitVids({
      customSelector: "iframe"
    });
    ref = this.$("iframe");
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      video = ref[i];
      video = $(video);
      if (video.hasClass("highlight")) {
        results.push(video.parent().addClass("highlight"));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  return RTEView;

})(Backbone.View);

window.SelectView = (function(superClass) {
  extend(SelectView, superClass);

  function SelectView() {
    return SelectView.__super__.constructor.apply(this, arguments);
  }

  SelectView.prototype.events = {
    "change": "updateSelectText"
  };

  SelectView.prototype.initialize = function() {
    if (!(this.$el.parent(".select-wrapper").length || this.$el.hasClass("product-variants") || this.$el.hasClass("select-disable-wrapper"))) {
      this.$el.wrap("<div class='select-wrapper' />").parent().prepend("<span class='selected-text'></span>");
    }
    return this.updateSelectText();
  };

  SelectView.prototype.updateSelectText = function() {
    var newOption;
    newOption = this.$el.find("option:selected").prop("selected", true).text();
    return this.$el.siblings(".selected-text").text(newOption);
  };

  return SelectView;

})(Backbone.View);

window.BlogStaticView = (function(superClass) {
  extend(BlogStaticView, superClass);

  function BlogStaticView() {
    return BlogStaticView.__super__.constructor.apply(this, arguments);
  }

  BlogStaticView.prototype.events = {
    "change .blog-sidebar select": "filterBlog"
  };

  BlogStaticView.prototype.initialize = function() {
    this.initializedClass = 'blog-initialized';
    return this._validate();
  };

  BlogStaticView.prototype.update = function($el) {
    this.$el = $el;
    this._validate();
    if (this.$('.blog-tag-filter select')) {
      return new SelectView({
        el: this.$('.blog-tag-filter select')
      });
    }
  };

  BlogStaticView.prototype.remove = function() {
    BlogStaticView.__super__.remove.apply(this, arguments);
    return $(window).off("resize.blog-view");
  };

  BlogStaticView.prototype._validate = function() {
    if (window.innerWidth <= 1080) {
      this.positionSidebar("below");
    } else {
      this.positionSidebar();
    }
    this.setupFeaturedImage();
    this.setupFullWidthImages();
    return $(window).on("resize.blog-view", (function(_this) {
      return function() {
        _this.setupFullWidthImages();
        if (window.innerWidth <= 1080) {
          return _this.positionSidebar("below");
        } else {
          _this.positionSidebar();
          return _this.setupFeaturedImage();
        }
      };
    })(this));
  };

  BlogStaticView.prototype.filterBlog = function(e) {
    var tag, url;
    if (!this.$el.is('[data-tag-filter]')) {
      return;
    }
    tag = this.$(e.target).val();
    url = this.$(e.target).data("url");
    if (tag === "all") {
      return window.location.href = "/blogs/" + url;
    } else {
      return window.location.href = "/blogs/" + url + "/tagged/" + tag;
    }
  };

  BlogStaticView.prototype.setupFeaturedImage = function(setup) {
    var i, image, len, post, ref, results;
    ref = this.$(".blog-post");
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      post = ref[i];
      post = $(post);
      image = post.find("img.highlight").first();
      if (image.length) {
        results.push(post.find(".blog-post-inner").css({
          "paddingTop": image.height() - 60
        }));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  BlogStaticView.prototype.setupFullWidthImages = function() {
    var i, image, len, postContent, postContentMargin, postContentWidth, ref, results;
    postContent = this.$(".post-content");
    postContentWidth = postContent.outerWidth(true);
    postContentMargin = postContent.css("marginLeft");
    ref = this.$("img.full-width");
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      image = ref[i];
      image = $(image);
      results.push(image.css({
        "width": postContentWidth,
        "left": "-" + postContentMargin
      }));
    }
    return results;
  };

  BlogStaticView.prototype.positionSidebar = function(position) {
    var sidebar;
    sidebar = this.$(".blog-sidebar");
    if (position === "below") {
      return sidebar.insertAfter(".blog-posts");
    } else {
      return sidebar.insertBefore(".blog-posts");
    }
  };

  return BlogStaticView;

})(Backbone.View);

window.BlogMasonryView = (function(superClass) {
  extend(BlogMasonryView, superClass);

  function BlogMasonryView() {
    return BlogMasonryView.__super__.constructor.apply(this, arguments);
  }

  BlogMasonryView.prototype.initialize = function() {
    this.$masonry = this.$el.find('[data-masonry-grid]');
    return this.masonryGrid = new MasonryGrid({
      $el: this.$masonry
    });
  };

  BlogMasonryView.prototype.onSectionUnload = function() {
    return this.masonryGrid.unload();
  };

  return BlogMasonryView;

})(Backbone.View);

window.BlogViewHandler = (function() {
  function BlogViewHandler($el) {
    var hasMasonryBlog, hasStaticBlog, selectors;
    this.$el = $el;
    this.sections = new ThemeEditor();
    selectors = {
      staticBlog: 'blog-static',
      masonryBlog: 'blog-masonry'
    };
    hasStaticBlog = this.$el.find("[data-section-type='" + selectors.staticBlog + "']").length;
    hasMasonryBlog = this.$el.find("[data-section-type='" + selectors.masonryBlog + "']").length;
    if (hasStaticBlog) {
      this.sections.register(selectors.staticBlog, this.staticBlog(this.sections));
    }
    if (hasMasonryBlog) {
      this.sections.register(selectors.masonryBlog, this.masonryBlog(this.sections));
    }
  }

  BlogViewHandler.prototype.staticBlog = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new BlogStaticView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionSelect: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        return (ref = this.instances[instance.sectionId]) != null ? ref.update(instance.$container) : void 0;
      },
      onSectionDeselect: function(event) {
        return this.onSectionSelect(event);
      },
      onSectionUnload: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        if ((ref = this.instances[instance.sectionId]) != null) {
          ref.remove();
        }
        return delete this.instances[instance.sectionId];
      }
    };
  };

  BlogViewHandler.prototype.masonryBlog = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new BlogMasonryView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionUnload: function(event) {
        var instance;
        instance = sections.getInstance(event);
        this.instances[instance.sectionId].onSectionUnload();
        return delete this.instances[instance.sectionId];
      }
    };
  };

  return BlogViewHandler;

})();


/* Static sections */

window.NavigationView = (function(superClass) {
  extend(NavigationView, superClass);

  function NavigationView() {
    return NavigationView.__super__.constructor.apply(this, arguments);
  }

  NavigationView.prototype.events = {
    'mouseover .mega-nav-list a': 'swapMegaNavImages',
    'click .has-dropdown [data-subnav-toggle]': 'toggleNavTier',
    'mouseleave .mega-nav-list a': 'useDefaultImage',
    'click [data-header-nav-toggle]': 'handleMobileNavigationToggle'
  };

  NavigationView.prototype.initialize = function() {
    this.$navigationWrapper = this.$('[data-navigation-wrapper]');
    this.$navigationContent = this.$('[data-navigation-content]');
    this.$body = $(document.body);
    this.transitionend = (function(transition) {
      var transEndEventNames;
      transEndEventNames = {
        '-webkit-transition': 'webkitTransitionEnd',
        '-moz-transition': 'transitionend',
        '-o-transition': 'oTransitionEnd',
        transition: 'transitionend'
      };
      return transEndEventNames[transition];
    })(Modernizr.prefixed('transition'));
    this.setupNavigation();
    $(window).on('resize.navigation', ((function(_this) {
      return function(event) {
        var $navigationSubmenuToggle;
        console.log(event);
        _this.setupNavigation();
        $navigationSubmenuToggle = $(event.currentTarget).find('.navigation-submenu-toggle');
        if (!window.ThemeUtils.isLessThanLarge() && _this.$body.hasClass('mobile-nav-open')) {
          _this.$navigationWrapper.removeClass('visible');
          $navigationSubmenuToggle.attr('aria-expanded', false);
          return _this.toggleMobileNavigation($navigationSubmenuToggle, 'close');
        }
      };
    })(this)));
    $('.has-mega-nav').on('mouseenter', ((function(_this) {
      return function(event) {
        var $dropdown, $navigationSubmenuToggle;
        if (window.ThemeUtils.isSmall()) {
          return;
        }
        $dropdown = $(event.currentTarget).children('.mega-nav');
        $navigationSubmenuToggle = $(event.currentTarget).find('.navigation-submenu-toggle');
        $dropdown.revealer('show');
        return $navigationSubmenuToggle.attr('aria-expanded', true);
      };
    })(this)));
    $('.has-mega-nav').on('mouseleave', ((function(_this) {
      return function(event) {
        var $dropdown, $navigationSubmenuToggle;
        if (window.ThemeUtils.isSmall()) {
          return;
        }
        $dropdown = $(event.currentTarget).children('.mega-nav');
        $navigationSubmenuToggle = $(event.currentTarget).find('.navigation-submenu-toggle');
        $dropdown.revealer('hide');
        return $navigationSubmenuToggle.attr('aria-expanded', false);
      };
    })(this)));
    $('.has-dropdown').on('mouseenter', ((function(_this) {
      return function(event) {
        var $dropdown, $navigationSubmenuToggle;
        $dropdown = $(event.currentTarget).children('.navigation-submenu');
        $navigationSubmenuToggle = $(event.currentTarget).find('.navigation-submenu-toggle');
        $dropdown.revealer('show');
        return $navigationSubmenuToggle.attr('aria-expanded', true);
      };
    })(this)));
    $('.has-dropdown').on('mouseleave', ((function(_this) {
      return function(event) {
        var $dropdown, $navigationSubmenuToggle;
        if (window.ThemeUtils.isSmall()) {
          return;
        }
        $dropdown = $(event.currentTarget).children('.navigation-submenu');
        $navigationSubmenuToggle = $(event.currentTarget).find('.navigation-submenu-toggle');
        $dropdown.revealer('hide');
        return $navigationSubmenuToggle.attr('aria-expanded', false);
      };
    })(this)));
    return $('.navigation-submenu').on('revealer-animating', ((function(_this) {
      return function(event) {
        var $dropdown, navigationWidth, offset;
        if (window.ThemeUtils.isSmall()) {
          return;
        }
        $dropdown = $(event.currentTarget);
        if (!$dropdown.hasClass('animating-in')) {
          return;
        }
        $dropdown.removeClass('navigation-submenu-open-left');
        $dropdown.css('opacity', 0);
        $dropdown.css('display', 'block');
        navigationWidth = _this.$navigationWrapper.width();
        offset = $dropdown.offset();
        if (offset.left + 200 > navigationWidth) {
          $dropdown.addClass('navigation-submenu-open-left');
        }
        $dropdown.css('opacity', '');
        return $dropdown.css('display', '');
      };
    })(this)));
  };

  NavigationView.prototype.unload = function() {
    $(window).off('resize.navigation');
    return this.toggleMobileNavigation('close');
  };

  NavigationView.prototype.setupNavigation = function() {
    if (!window.ThemeUtils.isLessThanLarge()) {
      this.$navigationWrapper.detach().insertAfter('[data-header-branding]');
      this.$navigationContent.removeClass('navigation-mobile').addClass('navigation-desktop');
      return this.$('li[data-mega-nav="true"]').removeClass('has-dropdown').addClass('has-mega-nav');
    } else {
      this.$navigationWrapper.detach().insertAfter('[data-header-main]');
      this.$navigationContent.removeClass('navigation-desktop').addClass('navigation-mobile');
      return this.$('li[data-mega-nav="true"]').removeClass('has-mega-nav').addClass('has-dropdown');
    }
  };

  NavigationView.prototype.swapMegaNavImages = function(e) {
    var image, imageAlt;
    image = this.$(e.target).parent().data('image');
    imageAlt = this.$(e.target).parent().data('image-alt');
    return this.$(e.target).closest('.mega-nav').find('.mega-nav-image img').attr('src', image).attr('alt', imageAlt);
  };

  NavigationView.prototype.handleMobileNavigationToggle = function(event) {
    var $navigationSubmenuToggle;
    $navigationSubmenuToggle = $(event.currentTarget).find('.navigation-submenu-toggle');
    if (this.$body.hasClass('mobile-nav-open')) {
      return this.toggleMobileNavigation($navigationSubmenuToggle, 'close');
    } else {
      return this.toggleMobileNavigation($navigationSubmenuToggle, 'open');
    }
  };

  NavigationView.prototype.toggleMobileNavigation = function($navigationSubmenuToggle, direction) {
    if (direction === 'open') {
      this.$body.addClass('mobile-nav-open lock-scroll');
      this.$navigationContent.addClass('visible');
      this.$navigationWrapper.addClass('visible background');
      $navigationSubmenuToggle.attr('aria-expanded', true);
      return this.setTierHeight();
    } else if (direction === 'close') {
      this.$navigationContent.removeAttr('style');
      this.$body.removeClass('mobile-nav-open');
      this.$navigationContent.removeClass('visible');
      $navigationSubmenuToggle.attr('aria-expanded', false);
      if (Modernizr.csstransitions) {
        this.$navigationWrapper.removeClass('background').one(this.transitionend, (function(_this) {
          return function() {
            _this.$navigationWrapper.removeClass('visible');
            $navigationSubmenuToggle.attr('aria-expanded', false);
            return _this.$body.removeClass('lock-scroll');
          };
        })(this));
      } else {
        this.$navigationWrapper.removeClass('visible background');
        $navigationSubmenuToggle.attr('aria-expanded', false);
        this.$body.removeClass('lock-scroll');
      }
      return this.$navigationContent.find('.has-dropdown-open').removeClass('has-dropdown-open').find('.navigation-submenu-visible').removeClass('navigation-submenu-visible');
    }
  };

  NavigationView.prototype.toggleNavTier = function(e) {
    var $parentEl, $target, $targetLinkList, $trigger;
    if (this.$navigationContent.hasClass('navigation-mobile')) {
      e.preventDefault();
    }
    $target = $(e.currentTarget);
    $trigger = $target.closest('a');
    $parentEl = $trigger.parent('li');
    $targetLinkList = this.$("ul[data-linklist='" + ($trigger.data('linklist-trigger')) + "']");
    if ($parentEl.hasClass('has-dropdown-open')) {
      this.closeNavTier({
        $parentEl: $parentEl,
        $targetLinkList: $targetLinkList
      });
      return $target.attr("aria-expanded", "false");
    } else {
      this.closeSiblingTiers($parentEl);
      this.openNavTier({
        $parentEl: $parentEl,
        $targetLinkList: $targetLinkList
      });
      return $target.attr("aria-expanded", "true");
    }
  };

  NavigationView.prototype.closeSiblingTiers = function($openMenu) {
    return $openMenu.siblings('.has-dropdown-open').each((function(_this) {
      return function(index, el) {
        var $parentEl, $targetLinkList;
        $parentEl = $(el);
        $targetLinkList = $parentEl.find('.navigation-submenu-visible');
        return _this.closeNavTier({
          $parentEl: $parentEl,
          $targetLinkList: $targetLinkList
        });
      };
    })(this));
  };

  NavigationView.prototype.openNavTier = function(options) {
    var $parentEl, $targetLinkList;
    $parentEl = options.$parentEl, $targetLinkList = options.$targetLinkList;
    $targetLinkList.addClass('navigation-submenu-visible');
    $parentEl.addClass('has-dropdown-open');
    return this.setTierHeight();
  };

  NavigationView.prototype.closeNavTier = function(options) {
    var $parentEl, $targetLinkList;
    $parentEl = options.$parentEl, $targetLinkList = options.$targetLinkList;
    $targetLinkList.removeClass('navigation-submenu-visible').find('.navigation-submenu-visible').removeClass('navigation-submenu-visible');
    $parentEl.removeClass('has-dropdown-open').find('.has-dropdown-open').removeClass('has-dropdown-open');
    return this.setTierHeight();
  };

  NavigationView.prototype.setTierHeight = function() {
    return this.$navigationContent.css({
      'overflow-y': 'scroll',
      'height': '100%'
    });
  };

  NavigationView.prototype.useDefaultImage = function(e) {
    var megaNavImage;
    megaNavImage = this.$(e.target).closest('.mega-nav').children('.mega-nav-image img');
    return megaNavImage.attr('src', megaNavImage.data('image')).attr('alt', megaNavImage.data('alt'));
  };

  return NavigationView;

})(Backbone.View);

window.HeaderView = (function(superClass) {
  extend(HeaderView, superClass);

  function HeaderView() {
    return HeaderView.__super__.constructor.apply(this, arguments);
  }

  HeaderView.prototype.initialize = function() {
    this.$window = $(window);
    this.$body = $(document.body);
    this.$header = this.$('[data-section-type="header"]');
    this.$mainHeader = this.$('[data-header-main]');
    this.$headerContent = this.$('[data-header-content]');
    this.$navigationWrapper = this.$('[data-navigation-wrapper]');
    this.$navigationContent = this.$('[data-navigation-content]');
    this.$branding = this.$('[data-header-branding]');
    this.$headerTools = this.$('.header-tools');
    this.$headerRight = this.$('[data-header-content-right]');
    this.$headerSearch = this.$('[data-header-search]');
    this.$headerSearchSubmit = this.$('[data-header-search-button]');
    this.$headerSearchClose = this.$('[data-header-search-button-close]');
    this.cachedHeight = 0;
    this.cachedStickyHeight = 0;
    this.isCacheStale = true;
    this.isStickyHeader = this.$el.is('[data-sticky-header]');
    this.isCompactCenter = this.$el.is('[data-header-compact-center]');
    this.navHeight = 0;
    this.windowWidth = window.ThemeUtils.windowWidth();
    setTimeout((function(_this) {
      return function() {
        return _this.navHeight = _this.$navigationWrapper.height();
      };
    })(this), 100);
    this.navigation = new NavigationView({
      el: this.$el
    });
    this._setSearchWidth();
    this._setupBranding();
    this._setCompactCenterHeights();
    this._toggleStickyHeader(this._shouldHeaderStick());
    return this._bindEvents();
  };

  HeaderView.prototype.onSectionDeselect = function() {
    return this.navigation.toggleMobileNavigation('close');
  };

  HeaderView.prototype.unload = function() {
    this.navigation.unload();
    this.$window.off('.header');
    this.$headerSearchSubmit.off('.header-search');
    this.$headerSearchClose.off('.header-search');
    return this._toggleStickyHeader(this._shouldHeaderStick());
  };

  HeaderView.prototype._bindEvents = function() {
    this.$window.on('resize.header', (function(_this) {
      return function() {
        if (window.ThemeUtils.windowWidth() === _this.windowWidth) {
          return;
        }
        _this.windowWidth = window.ThemeUtils.windowWidth();
        _this.navHeight = _this.$navigationWrapper.height();
        _this.isCacheStale = true;
        _this._toggleStickyHeader(_this._shouldHeaderStick());
        _this._setSearchWidth();
        _this._setCompactCenterHeights();
        if (!window.ThemeUtils.isLessThanLarge()) {
          return _this._toggleSearchForm(false);
        }
      };
    })(this));
    this.$window.on('scroll.header', (function(_this) {
      return function() {
        if (!_this.isStickyHeader) {
          _this._setCompactCenterHeights();
        }
        return _this._toggleStickyHeader(_this._shouldHeaderStick());
      };
    })(this));
    this.$headerSearchSubmit.on('click.header-search', (function(_this) {
      return function(event) {
        var $target;
        $target = $(event.currentTarget);
        if (!window.ThemeUtils.isLessThanLarge()) {
          return;
        }
        if ($target.data('clicked')) {
          return;
        }
        event.preventDefault();
        $target.data('clicked', true);
        _this._bindCloseSearch();
        return _this._toggleSearchForm(true);
      };
    })(this));
    return this.$headerSearchClose.on('click.header-search', (function(_this) {
      return function(event) {
        event.preventDefault();
        return _this._toggleSearchForm(false);
      };
    })(this));
  };


  /*
      When search form is open, and receives click outside of form, close
   */

  HeaderView.prototype._bindCloseSearch = function() {
    return this.$body.on('click.header-search-close', event, (function(_this) {
      return function() {
        var $parent;
        $parent = $(event.target).parents('[data-header-search]');
        if ($parent.length) {
          return;
        }
        return _this._toggleSearchForm(false);
      };
    })(this));
  };

  HeaderView.prototype._shouldHeaderStick = function() {
    var height, shouldStick, stickyHeight;
    shouldStick = false;
    if (!this.isStickyHeader) {
      return shouldStick;
    }
    if (this.isCacheStale) {
      height = this.$body.hasClass('sticky-header') ? 0 : this.$headerContent.outerHeight(true);
      stickyHeight = this.$body.hasClass('sticky-header') ? this.$headerContent.outerHeight(true) : 0;
      this.$body.toggleClass('sticky-header');
      height = !this.$body.hasClass('sticky-header') ? this.$headerContent.outerHeight(true) : height;
      stickyHeight = !this.$body.hasClass('sticky-header') ? stickyHeight : this.$headerContent.outerHeight(true);
      this.$body.toggleClass('sticky-header');
      this.cachedHeight = height;
      this.cachedStickyHeight = stickyHeight;
      this.isCacheStale = false;
    }
    if (this.$window.scrollTop() > (this.$headerTools.outerHeight() + this.cachedHeight - this.cachedStickyHeight)) {
      shouldStick = true;
    }
    if (window.ThemeUtils.isLessThanLarge() || this.$body.hasClass('alternate-index-layout')) {
      shouldStick = false;
    }
    return shouldStick;
  };

  HeaderView.prototype._toggleStickyHeader = function(toggleOn) {
    var paddingBottom;
    if (toggleOn == null) {
      toggleOn = false;
    }
    if (toggleOn && !this.$body.hasClass('sticky-header')) {
      paddingBottom = this.cachedHeight;
      this.$mainHeader.css({
        paddingBottom: paddingBottom
      });
    }
    if (!toggleOn) {
      paddingBottom = 0;
      this.$mainHeader.css({
        paddingBottom: paddingBottom
      });
    }
    if (toggleOn !== this.$body.hasClass('sticky-header')) {
      this.$body.toggleClass('sticky-header', toggleOn);
      return this._setCompactCenterHeights(!toggleOn);
    }
  };


  /*
      Expand search form logic
   */

  HeaderView.prototype._toggleSearchForm = function(open) {
    var headerRightWidth, headerSearchWidth, logoCollision, navCollision, ref, searchButtonWidth;
    if (open == null) {
      open = false;
    }
    headerRightWidth = '';
    headerSearchWidth = parseInt(this.$headerSearch.data('width'), 10);
    searchButtonWidth = this.$headerSearchClose.outerWidth(true);
    logoCollision = false;
    navCollision = false;
    if (open) {
      ref = this._logoSearchCollision(headerSearchWidth), logoCollision = ref.logoCollision, navCollision = ref.navCollision;
      headerRightWidth = headerSearchWidth + searchButtonWidth;
      headerSearchWidth = '100%';
    } else {
      this.$headerSearchSubmit.data('clicked', false);
      this.$body.off('.header-search-close');
    }
    if (!open && this.$mainHeader.hasClass('header-search-expanded')) {
      this.$mainHeader.addClass('header-search-expanded-closing', true);
    }
    this.$mainHeader.toggleClass('header-search-expanded', open);
    this.$mainHeader.toggleClass('header-nav-toggle-covered', navCollision);
    this.$mainHeader.toggleClass('header-logo-covered', logoCollision).one('trend', (function(_this) {
      return function() {
        if (!open) {
          return _this.$mainHeader.removeClass('header-search-expanded-closing');
        }
      };
    })(this));
    this.$headerRight.css({
      width: headerRightWidth
    });
    return this.$headerSearch.css({
      width: headerSearchWidth
    });
  };


  /*
      Detect if Logo or nav toggle will be covered by expanded search form
   */

  HeaderView.prototype._logoSearchCollision = function(headerSearchWidth) {
    var logoCollision, logoRightEdge, navCollision, navRightEdge, searchLeftEdge;
    logoRightEdge = document.querySelector('[data-header-branding] .logo-link').getBoundingClientRect().right;
    navRightEdge = document.querySelector('[data-header-content] [data-header-nav-toggle]').getBoundingClientRect().right;
    searchLeftEdge = document.querySelector('[data-header-search]').getBoundingClientRect().left - headerSearchWidth;
    logoCollision = logoRightEdge > searchLeftEdge;
    navCollision = navRightEdge > searchLeftEdge;
    return {
      logoCollision: logoCollision,
      navCollision: navCollision
    };
  };


  /*
      Match Navigation and Branding heights
      Center navigation vertically if Branding is taller
   */

  HeaderView.prototype._setCompactCenterHeights = function(toggleOn) {
    var heights, minHeight, navHeight, navOffset;
    if (toggleOn == null) {
      toggleOn = true;
    }
    if (!this.isCompactCenter) {
      return;
    }
    minHeight = 'auto';
    navHeight = this.$navigationContent.outerHeight(true);
    navOffset = 0;
    if (!window.ThemeUtils.isLessThanLarge() && toggleOn) {
      heights = [];
      heights.push(navHeight);
      heights.push(this.$branding.outerHeight(true));
      minHeight = Math.max.apply(null, heights);
    }
    if (navHeight < minHeight) {
      navOffset = (minHeight - navHeight) / 2;
    }
    this.navHeight = this.$navigationWrapper.outerHeight(true);
    this.$navigationWrapper.css('margin-top', navOffset);
    return this.$headerContent.css({
      minHeight: minHeight
    });
  };

  HeaderView.prototype._setupBranding = function() {
    var $mobileBranding;
    $mobileBranding = this.$branding.clone();
    $mobileBranding.removeAttr('data-header-branding').removeClass('header-branding-desktop').addClass('header-branding-mobile');
    return this.$navigationContent.prepend($mobileBranding);
  };

  HeaderView.prototype._setSearchWidth = function() {
    var searchWidth;
    searchWidth = this.$mainHeader.find('.mini-cart-wrapper').outerWidth(true) + this.$mainHeader.find('.checkout-link').outerWidth(true);
    this.$headerSearch.width(searchWidth);
    return this.$headerSearch.data('width', searchWidth);
  };

  return HeaderView;

})(Backbone.View);

window.CollectionView = (function(superClass) {
  extend(CollectionView, superClass);

  function CollectionView() {
    return CollectionView.__super__.constructor.apply(this, arguments);
  }

  CollectionView.prototype.events = {
    'change [data-collection-tags]': 'filterCollection',
    'change [data-collection-sorting]': 'sortCollection'
  };

  CollectionView.prototype.initialize = function() {
    this.$masonry = this.$('[data-masonry-grid]');
    this.masonryGrid = null;
    this.$collectionTags = this.$('[data-collection-tags]');
    this.$collectionSorting = this.$('[data-collection-sorting]');
    if (this.$collectionTags.length) {
      new SelectView({
        el: this.$collectionTags
      });
    }
    if (this.$collectionSorting.length) {
      new SelectView({
        el: this.$collectionSorting
      });
    }
    if (this.$masonry.length) {
      return this.masonryGrid = new MasonryGrid({
        $el: this.$masonry,
        settings: {
          itemSelector: '.product-list-item'
        }
      });
    }
  };

  CollectionView.prototype.onSectionUnload = function() {
    if (this.masonryGrid) {
      return this.masonryGrid.unload();
    }
  };

  CollectionView.prototype.filterCollection = function(event) {
    var $target, tag, url;
    $target = $(event.currentTarget);
    tag = $target.val();
    url = $target.data('url');
    if (tag === "all") {
      return window.location.href = "/collections/" + url;
    } else {
      return window.location.href = "/collections/" + url + "/" + tag;
    }
  };

  CollectionView.prototype.sortCollection = function(event) {
    var $target, Sorting, currentSearch, i, index, len, part, search, searchParts;
    $target = $(event.currentTarget);
    Sorting = {};
    Sorting.sort_by = $target.val();
    if ($target.closest('.select-wrapper').hasClass('vendor-collection')) {
      currentSearch = location.search;
      searchParts = currentSearch.split('&');
      for (index = i = 0, len = searchParts.length; i < len; index = ++i) {
        part = searchParts[index];
        if (part.indexOf('sort_by') !== -1) {
          searchParts.splice(index, 1);
        }
      }
      search = searchParts.join('&');
      return location.search = search + "&" + (jQuery.param(Sorting));
    } else {
      return location.search = jQuery.param(Sorting);
    }
  };

  return CollectionView;

})(Backbone.View);

window.ArticleView = (function(superClass) {
  extend(ArticleView, superClass);

  function ArticleView() {
    return ArticleView.__super__.constructor.apply(this, arguments);
  }

  ArticleView.prototype.initialize = function() {
    this.initializedClass = 'article-initialized';
    return this._validate();
  };

  ArticleView.prototype.update = function($el) {
    this.$el = $el;
    return this._validate();
  };

  ArticleView.prototype.remove = function() {
    ArticleView.__super__.remove.apply(this, arguments);
    return $(window).off("resize.article-view");
  };

  ArticleView.prototype._validate = function() {
    if (window.innerWidth <= 1080) {
      this.positionSidebar("below");
    } else {
      this.positionSidebar();
    }
    this.setupFeaturedImage();
    this.setupFullWidthImages();
    return $(window).on("resize.article-view", (function(_this) {
      return function() {
        _this.setupFullWidthImages();
        if (window.innerWidth <= 1080) {
          return _this.positionSidebar("below");
        } else {
          _this.positionSidebar();
          return _this.setupFeaturedImage();
        }
      };
    })(this));
  };

  ArticleView.prototype.setupFeaturedImage = function(setup) {
    var i, image, len, post, ref, results;
    ref = this.$(".blog-post");
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      post = ref[i];
      post = $(post);
      image = post.find("img.highlight").first();
      if (image.length) {
        results.push(post.find(".blog-post-inner").css({
          "paddingTop": image.height() - 60
        }));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  ArticleView.prototype.setupFullWidthImages = function() {
    var i, image, len, postContent, postContentMargin, postContentWidth, ref, results;
    postContent = this.$(".post-content");
    postContentWidth = postContent.outerWidth(true);
    postContentMargin = postContent.css("marginLeft");
    ref = this.$("img.full-width");
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      image = ref[i];
      image = $(image);
      results.push(image.css({
        "width": postContentWidth,
        "left": "-" + postContentMargin
      }));
    }
    return results;
  };

  ArticleView.prototype.positionSidebar = function(position) {
    var sidebar;
    sidebar = this.$(".blog-sidebar");
    if (position === "below") {
      return sidebar.insertAfter(".blog-post-wrapper");
    } else {
      return sidebar.insertBefore(".blog-post-wrapper");
    }
  };

  return ArticleView;

})(Backbone.View);

window.CartView = (function(superClass) {
  extend(CartView, superClass);

  function CartView() {
    return CartView.__super__.constructor.apply(this, arguments);
  }

  CartView.prototype.events = {
    "click .get-rates": "getRates",
    "change .cart-instructions textarea": "saveSpecialInstructions"
  };

  CartView.prototype.initialize = function() {
    this.initializedClass = 'cart-initialized';
    return this._validate();
  };

  CartView.prototype.update = function($el) {
    this.$el = $el;
    return this._validate();
  };

  CartView.prototype._validate = function() {
    this.hasShippingCalculator = this.$el.is("[data-shipping-calculator]");
    if (this.hasShippingCalculator) {
      this.shippingCalculator();
      if (Theme.customerLoggedIn && Theme.customerAddress && Theme.customerAddress.country) {
        this.calculateShipping(true);
      }
    }
    return Shopify.onError = (function(_this) {
      return function(XMLHttpRequest) {
        return _this.handleErrors(XMLHttpRequest);
      };
    })(this);
  };

  CartView.prototype.saveSpecialInstructions = function() {
    var newNote;
    newNote = $(".cart-instructions textarea").val();
    return Shopify.updateCartNote(newNote, function(cart) {});
  };

  CartView.prototype.updateShippingLabel = function(select) {
    var selectedVariant;
    if (select) {
      select = $(select);
      selectedVariant = select.find("option:selected").val();
      return select.prev(".selected-option").text(selectedVariant);
    }
  };

  CartView.prototype.shippingCalculator = function() {
    var selectableOptions;
    Shopify.Cart.ShippingCalculator.show({
      submitButton: Theme.shippingButton,
      submitButtonDisabled: Theme.shippingDisabled,
      customerIsLoggedIn: Theme.customerLoggedIn,
      moneyFormat: Theme.moneyFormat
    });
    selectableOptions = this.$(".cart-shipping-calculator select");
    setTimeout((function(_this) {
      return function() {
        var i, len, results, select;
        results = [];
        for (i = 0, len = selectableOptions.length; i < len; i++) {
          select = selectableOptions[i];
          results.push(_this.updateShippingLabel(select));
        }
        return results;
      };
    })(this), 500);
    return this.$(".cart-shipping-calculator select").change((function(_this) {
      return function(e) {
        var i, len, results, select;
        results = [];
        for (i = 0, len = selectableOptions.length; i < len; i++) {
          select = selectableOptions[i];
          results.push(_this.updateShippingLabel(select));
        }
        return results;
      };
    })(this));
  };

  CartView.prototype.getRates = function() {
    return this.calculateShipping();
  };

  CartView.prototype.calculateShipping = function(auto) {
    var ratesFeedback, shippingAddress, shippingCalculatorResponse;
    shippingCalculatorResponse = this.$(".cart-shipping-calculator-response");
    shippingCalculatorResponse.empty().append("<p class='shipping-calculator-response message'/><ul class='shipping-rates'/>");
    ratesFeedback = $(".shipping-calculator-response");
    this.$(".get-rates").val(Theme.shippingDisabled);
    if (auto) {
      shippingAddress = Theme.customerAddress;
    } else {
      shippingAddress = {};
      shippingAddress.zip = this.$(".address-zip").val() || "";
      shippingAddress.country = this.$(".address-country").val() || "";
      shippingAddress.province = this.$(".address-province").val() || "";
    }
    return Shopify.getCartShippingRatesForDestination(shippingAddress, function(rates) {
      var address, firstRate, i, len, price, rate, rateValues, response;
      address = shippingAddress.zip + ", " + shippingAddress.province + ", " + shippingAddress.country;
      if (!shippingAddress.province.length) {
        address = shippingAddress.zip + ", " + shippingAddress.country;
      }
      if (!shippingAddress.zip.length) {
        address = shippingAddress.province + ", " + shippingAddress.country;
      }
      if (!(shippingAddress.province.length && shippingAddress.zip.length)) {
        address = shippingAddress.country;
      }
      if (rates.length > 1) {
        firstRate = Shopify.Cart.ShippingCalculator.formatRate(rates[0].price);
        response = Theme.shippingCalcMultiRates.replace("**address**", address).replace("**number_of_rates**", rates.length).replace("**rate**", "<span class='money'>" + firstRate + "</span>");
        ratesFeedback.html(response);
      } else if (rates.length === 1) {
        response = Theme.shippingCalcOneRate.replace("**address**", address);
        ratesFeedback.html(response);
      } else {
        ratesFeedback.html(Theme.shippingCalcNoRates);
      }
      for (i = 0, len = rates.length; i < len; i++) {
        rate = rates[i];
        price = Shopify.Cart.ShippingCalculator.formatRate(rate.price);
        rateValues = Theme.shippingCalcRateValues.replace("**rate_title**", rate.name).replace("**rate**", "<span class='money'>" + price + "</span>");
        this.$(".shipping-rates").append("<li>" + rateValues + "</li>");
      }
      return this.$(".get-rates").val(Theme.shippingButton);
    });
  };

  CartView.prototype.handleErrors = function(errors) {
    var errorMessage;
    errorMessage = $.parseJSON(errors.responseText);
    errorMessage = Theme.shippingCalcErrorMessage.replace("**error_message**", errorMessage.zip);
    this.$(".cart-shipping-calculator-response").html("<p>" + errorMessage + "</p>");
    return this.$(".get-rates").val(Theme.shippingButton);
  };

  return CartView;

})(Backbone.View);

window.ListCollections = (function(superClass) {
  extend(ListCollections, superClass);

  function ListCollections($el) {
    this.$masonry = $el.find('[data-masonry-grid]');
    this.masonryGrid = null;
    if (this.$masonry.length) {
      this.masonryGrid = new MasonryGrid({
        $el: this.$masonry
      });
    }
  }

  ListCollections.prototype.onSectionUnload = function() {
    if (this.masonryGrid) {
      return this.masonryGrid.unload();
    }
  };

  return ListCollections;

})(Backbone.View);

ProductSection = (function() {
  function ProductSection(el, options) {
    this.product = new Product(el, options);
  }

  ProductSection.prototype.onSectionUnload = function() {
    return this.product.unload();
  };

  return ProductSection;

})();


    /**
     * Copyright 2016 Google Inc. All Rights Reserved.
     *
     * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.
     *
     *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document
     *
     */
    
    (function(window, document) {
    'use strict';
    
    
    // Exits early if all IntersectionObserver and IntersectionObserverEntry
    // features are natively supported.
    if ('IntersectionObserver' in window &&
        'IntersectionObserverEntry' in window &&
        'intersectionRatio' in window.IntersectionObserverEntry.prototype) {
    
      // Minimal polyfill for Edge 15's lack of `isIntersecting`
      // See: https://github.com/w3c/IntersectionObserver/issues/211
      if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {
        Object.defineProperty(window.IntersectionObserverEntry.prototype,
          'isIntersecting', {
          get: function () {
            return this.intersectionRatio > 0;
          }
        });
      }
      return;
    }
    
    
    /**
     * An IntersectionObserver registry. This registry exists to hold a strong
     * reference to IntersectionObserver instances currently observering a target
     * element. Without this registry, instances without another reference may be
     * garbage collected.
     */
    var registry = [];
    
    
    /**
     * Creates the global IntersectionObserverEntry constructor.
     * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry
     * @param {Object} entry A dictionary of instance properties.
     * @constructor
     */
    function IntersectionObserverEntry(entry) {
      this.time = entry.time;
      this.target = entry.target;
      this.rootBounds = entry.rootBounds;
      this.boundingClientRect = entry.boundingClientRect;
      this.intersectionRect = entry.intersectionRect || getEmptyRect();
      this.isIntersecting = !!entry.intersectionRect;
    
      // Calculates the intersection ratio.
      var targetRect = this.boundingClientRect;
      var targetArea = targetRect.width * targetRect.height;
      var intersectionRect = this.intersectionRect;
      var intersectionArea = intersectionRect.width * intersectionRect.height;
    
      // Sets intersection ratio.
      if (targetArea) {
        this.intersectionRatio = intersectionArea / targetArea;
      } else {
        // If area is zero and is intersecting, sets to 1, otherwise to 0
        this.intersectionRatio = this.isIntersecting ? 1 : 0;
      }
    }
    
    
    /**
     * Creates the global IntersectionObserver constructor.
     * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface
     * @param {Function} callback The function to be invoked after intersection
     *     changes have queued. The function is not invoked if the queue has
     *     been emptied by calling the `takeRecords` method.
     * @param {Object=} opt_options Optional configuration options.
     * @constructor
     */
    function IntersectionObserver(callback, opt_options) {
    
      var options = opt_options || {};
    
      if (typeof callback != 'function') {
        throw new Error('callback must be a function');
      }
    
      if (options.root && options.root.nodeType != 1) {
        throw new Error('root must be an Element');
      }
    
      // Binds and throttles `this._checkForIntersections`.
      this._checkForIntersections = throttle(
          this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);
    
      // Private properties.
      this._callback = callback;
      this._observationTargets = [];
      this._queuedEntries = [];
      this._rootMarginValues = this._parseRootMargin(options.rootMargin);
    
      // Public properties.
      this.thresholds = this._initThresholds(options.threshold);
      this.root = options.root || null;
      this.rootMargin = this._rootMarginValues.map(function(margin) {
        return margin.value + margin.unit;
      }).join(' ');
    }
    
    
    /**
     * The minimum interval within which the document will be checked for
     * intersection changes.
     */
    IntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;
    
    
    /**
     * The frequency in which the polyfill polls for intersection changes.
     * this can be updated on a per instance basis and must be set prior to
     * calling `observe` on the first target.
     */
    IntersectionObserver.prototype.POLL_INTERVAL = null;
    
    /**
     * Use a mutation observer on the root element
     * to detect intersection changes.
     */
    IntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;
    
    
    /**
     * Starts observing a target element for intersection changes based on
     * the thresholds values.
     * @param {Element} target The DOM element to observe.
     */
    IntersectionObserver.prototype.observe = function(target) {
      var isTargetAlreadyObserved = this._observationTargets.some(function(item) {
        return item.element == target;
      });
    
      if (isTargetAlreadyObserved) {
        return;
      }
    
      if (!(target && target.nodeType == 1)) {
        throw new Error('target must be an Element');
      }
    
      this._registerInstance();
      this._observationTargets.push({element: target, entry: null});
      this._monitorIntersections();
      this._checkForIntersections();
    };
    
    
    /**
     * Stops observing a target element for intersection changes.
     * @param {Element} target The DOM element to observe.
     */
    IntersectionObserver.prototype.unobserve = function(target) {
      this._observationTargets =
          this._observationTargets.filter(function(item) {
    
        return item.element != target;
      });
      if (!this._observationTargets.length) {
        this._unmonitorIntersections();
        this._unregisterInstance();
      }
    };
    
    
    /**
     * Stops observing all target elements for intersection changes.
     */
    IntersectionObserver.prototype.disconnect = function() {
      this._observationTargets = [];
      this._unmonitorIntersections();
      this._unregisterInstance();
    };
    
    
    /**
     * Returns any queue entries that have not yet been reported to the
     * callback and clears the queue. This can be used in conjunction with the
     * callback to obtain the absolute most up-to-date intersection information.
     * @return {Array} The currently queued entries.
     */
    IntersectionObserver.prototype.takeRecords = function() {
      var records = this._queuedEntries.slice();
      this._queuedEntries = [];
      return records;
    };
    
    
    /**
     * Accepts the threshold value from the user configuration object and
     * returns a sorted array of unique threshold values. If a value is not
     * between 0 and 1 and error is thrown.
     * @private
     * @param {Array|number=} opt_threshold An optional threshold value or
     *     a list of threshold values, defaulting to [0].
     * @return {Array} A sorted list of unique and valid threshold values.
     */
    IntersectionObserver.prototype._initThresholds = function(opt_threshold) {
      var threshold = opt_threshold || [0];
      if (!Array.isArray(threshold)) threshold = [threshold];
    
      return threshold.sort().filter(function(t, i, a) {
        if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {
          throw new Error('threshold must be a number between 0 and 1 inclusively');
        }
        return t !== a[i - 1];
      });
    };
    
    
    /**
     * Accepts the rootMargin value from the user configuration object
     * and returns an array of the four margin values as an object containing
     * the value and unit properties. If any of the values are not properly
     * formatted or use a unit other than px or %, and error is thrown.
     * @private
     * @param {string=} opt_rootMargin An optional rootMargin value,
     *     defaulting to '0px'.
     * @return {Array<Object>} An array of margin objects with the keys
     *     value and unit.
     */
    IntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {
      var marginString = opt_rootMargin || '0px';
      var margins = marginString.split(/\s+/).map(function(margin) {
        var parts = /^(-?\d*\.?\d+)(px|%)$/.exec(margin);
        if (!parts) {
          throw new Error('rootMargin must be specified in pixels or percent');
        }
        return {value: parseFloat(parts[1]), unit: parts[2]};
      });
    
      // Handles shorthand.
      margins[1] = margins[1] || margins[0];
      margins[2] = margins[2] || margins[0];
      margins[3] = margins[3] || margins[1];
    
      return margins;
    };
    
    
    /**
     * Starts polling for intersection changes if the polling is not already
     * happening, and if the page's visibilty state is visible.
     * @private
     */
    IntersectionObserver.prototype._monitorIntersections = function() {
      if (!this._monitoringIntersections) {
        this._monitoringIntersections = true;
    
        // If a poll interval is set, use polling instead of listening to
        // resize and scroll events or DOM mutations.
        if (this.POLL_INTERVAL) {
          this._monitoringInterval = setInterval(
              this._checkForIntersections, this.POLL_INTERVAL);
        }
        else {
          addEvent(window, 'resize', this._checkForIntersections, true);
          addEvent(document, 'scroll', this._checkForIntersections, true);
    
          if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in window) {
            this._domObserver = new MutationObserver(this._checkForIntersections);
            this._domObserver.observe(document, {
              attributes: true,
              childList: true,
              characterData: true,
              subtree: true
            });
          }
        }
      }
    };
    
    
    /**
     * Stops polling for intersection changes.
     * @private
     */
    IntersectionObserver.prototype._unmonitorIntersections = function() {
      if (this._monitoringIntersections) {
        this._monitoringIntersections = false;
    
        clearInterval(this._monitoringInterval);
        this._monitoringInterval = null;
    
        removeEvent(window, 'resize', this._checkForIntersections, true);
        removeEvent(document, 'scroll', this._checkForIntersections, true);
    
        if (this._domObserver) {
          this._domObserver.disconnect();
          this._domObserver = null;
        }
      }
    };
    
    
    /**
     * Scans each observation target for intersection changes and adds them
     * to the internal entries queue. If new entries are found, it
     * schedules the callback to be invoked.
     * @private
     */
    IntersectionObserver.prototype._checkForIntersections = function() {
      var rootIsInDom = this._rootIsInDom();
      var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();
    
      this._observationTargets.forEach(function(item) {
        var target = item.element;
        var targetRect = getBoundingClientRect(target);
        var rootContainsTarget = this._rootContainsTarget(target);
        var oldEntry = item.entry;
        var intersectionRect = rootIsInDom && rootContainsTarget &&
            this._computeTargetAndRootIntersection(target, rootRect);
    
        var newEntry = item.entry = new IntersectionObserverEntry({
          time: now(),
          target: target,
          boundingClientRect: targetRect,
          rootBounds: rootRect,
          intersectionRect: intersectionRect
        });
    
        if (!oldEntry) {
          this._queuedEntries.push(newEntry);
        } else if (rootIsInDom && rootContainsTarget) {
          // If the new entry intersection ratio has crossed any of the
          // thresholds, add a new entry.
          if (this._hasCrossedThreshold(oldEntry, newEntry)) {
            this._queuedEntries.push(newEntry);
          }
        } else {
          // If the root is not in the DOM or target is not contained within
          // root but the previous entry for this target had an intersection,
          // add a new record indicating removal.
          if (oldEntry && oldEntry.isIntersecting) {
            this._queuedEntries.push(newEntry);
          }
        }
      }, this);
    
      if (this._queuedEntries.length) {
        this._callback(this.takeRecords(), this);
      }
    };
    
    
    /**
     * Accepts a target and root rect computes the intersection between then
     * following the algorithm in the spec.
     * TODO(philipwalton): at this time clip-path is not considered.
     * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo
     * @param {Element} target The target DOM element
     * @param {Object} rootRect The bounding rect of the root after being
     *     expanded by the rootMargin value.
     * @return {?Object} The final intersection rect object or undefined if no
     *     intersection is found.
     * @private
     */
    IntersectionObserver.prototype._computeTargetAndRootIntersection =
        function(target, rootRect) {
    
      // If the element isn't displayed, an intersection can't happen.
      if (window.getComputedStyle(target).display == 'none') return;
    
      var targetRect = getBoundingClientRect(target);
      var intersectionRect = targetRect;
      var parent = getParentNode(target);
      var atRoot = false;
    
      while (!atRoot) {
        var parentRect = null;
        var parentComputedStyle = parent.nodeType == 1 ?
            window.getComputedStyle(parent) : {};
    
        // If the parent isn't displayed, an intersection can't happen.
        if (parentComputedStyle.display == 'none') return;
    
        if (parent == this.root || parent == document) {
          atRoot = true;
          parentRect = rootRect;
        } else {
          // If the element has a non-visible overflow, and it's not the <body>
          // or <html> element, update the intersection rect.
          // Note: <body> and <html> cannot be clipped to a rect that's not also
          // the document rect, so no need to compute a new intersection.
          if (parent != document.body &&
              parent != document.documentElement &&
              parentComputedStyle.overflow != 'visible') {
            parentRect = getBoundingClientRect(parent);
          }
        }
    
        // If either of the above conditionals set a new parentRect,
        // calculate new intersection data.
        if (parentRect) {
          intersectionRect = computeRectIntersection(parentRect, intersectionRect);
    
          if (!intersectionRect) break;
        }
        parent = getParentNode(parent);
      }
      return intersectionRect;
    };
    
    
    /**
     * Returns the root rect after being expanded by the rootMargin value.
     * @return {Object} The expanded root rect.
     * @private
     */
    IntersectionObserver.prototype._getRootRect = function() {
      var rootRect;
      if (this.root) {
        rootRect = getBoundingClientRect(this.root);
      } else {
        // Use <html>/<body> instead of window since scroll bars affect size.
        var html = document.documentElement;
        var body = document.body;
        rootRect = {
          top: 0,
          left: 0,
          right: html.clientWidth || body.clientWidth,
          width: html.clientWidth || body.clientWidth,
          bottom: html.clientHeight || body.clientHeight,
          height: html.clientHeight || body.clientHeight
        };
      }
      return this._expandRectByRootMargin(rootRect);
    };
    
    
    /**
     * Accepts a rect and expands it by the rootMargin value.
     * @param {Object} rect The rect object to expand.
     * @return {Object} The expanded rect.
     * @private
     */
    IntersectionObserver.prototype._expandRectByRootMargin = function(rect) {
      var margins = this._rootMarginValues.map(function(margin, i) {
        return margin.unit == 'px' ? margin.value :
            margin.value * (i % 2 ? rect.width : rect.height) / 100;
      });
      var newRect = {
        top: rect.top - margins[0],
        right: rect.right + margins[1],
        bottom: rect.bottom + margins[2],
        left: rect.left - margins[3]
      };
      newRect.width = newRect.right - newRect.left;
      newRect.height = newRect.bottom - newRect.top;
    
      return newRect;
    };
    
    
    /**
     * Accepts an old and new entry and returns true if at least one of the
     * threshold values has been crossed.
     * @param {?IntersectionObserverEntry} oldEntry The previous entry for a
     *    particular target element or null if no previous entry exists.
     * @param {IntersectionObserverEntry} newEntry The current entry for a
     *    particular target element.
     * @return {boolean} Returns true if a any threshold has been crossed.
     * @private
     */
    IntersectionObserver.prototype._hasCrossedThreshold =
        function(oldEntry, newEntry) {
    
      // To make comparing easier, an entry that has a ratio of 0
      // but does not actually intersect is given a value of -1
      var oldRatio = oldEntry && oldEntry.isIntersecting ?
          oldEntry.intersectionRatio || 0 : -1;
      var newRatio = newEntry.isIntersecting ?
          newEntry.intersectionRatio || 0 : -1;
    
      // Ignore unchanged ratios
      if (oldRatio === newRatio) return;
    
      for (var i = 0; i < this.thresholds.length; i++) {
        var threshold = this.thresholds[i];
    
        // Return true if an entry matches a threshold or if the new ratio
        // and the old ratio are on the opposite sides of a threshold.
        if (threshold == oldRatio || threshold == newRatio ||
            threshold < oldRatio !== threshold < newRatio) {
          return true;
        }
      }
    };
    
    
    /**
     * Returns whether or not the root element is an element and is in the DOM.
     * @return {boolean} True if the root element is an element and is in the DOM.
     * @private
     */
    IntersectionObserver.prototype._rootIsInDom = function() {
      return !this.root || containsDeep(document, this.root);
    };
    
    
    /**
     * Returns whether or not the target element is a child of root.
     * @param {Element} target The target element to check.
     * @return {boolean} True if the target element is a child of root.
     * @private
     */
    IntersectionObserver.prototype._rootContainsTarget = function(target) {
      return containsDeep(this.root || document, target);
    };
    
    
    /**
     * Adds the instance to the global IntersectionObserver registry if it isn't
     * already present.
     * @private
     */
    IntersectionObserver.prototype._registerInstance = function() {
      if (registry.indexOf(this) < 0) {
        registry.push(this);
      }
    };
    
    
    /**
     * Removes the instance from the global IntersectionObserver registry.
     * @private
     */
    IntersectionObserver.prototype._unregisterInstance = function() {
      var index = registry.indexOf(this);
      if (index != -1) registry.splice(index, 1);
    };
    
    
    /**
     * Returns the result of the performance.now() method or null in browsers
     * that don't support the API.
     * @return {number} The elapsed time since the page was requested.
     */
    function now() {
      return window.performance && performance.now && performance.now();
    }
    
    
    /**
     * Throttles a function and delays its executiong, so it's only called at most
     * once within a given time period.
     * @param {Function} fn The function to throttle.
     * @param {number} timeout The amount of time that must pass before the
     *     function can be called again.
     * @return {Function} The throttled function.
     */
    function throttle(fn, timeout) {
      var timer = null;
      return function () {
        if (!timer) {
          timer = setTimeout(function() {
            fn();
            timer = null;
          }, timeout);
        }
      };
    }
    
    
    /**
     * Adds an event handler to a DOM node ensuring cross-browser compatibility.
     * @param {Node} node The DOM node to add the event handler to.
     * @param {string} event The event name.
     * @param {Function} fn The event handler to add.
     * @param {boolean} opt_useCapture Optionally adds the even to the capture
     *     phase. Note: this only works in modern browsers.
     */
    function addEvent(node, event, fn, opt_useCapture) {
      if (typeof node.addEventListener == 'function') {
        node.addEventListener(event, fn, opt_useCapture || false);
      }
      else if (typeof node.attachEvent == 'function') {
        node.attachEvent('on' + event, fn);
      }
    }
    
    
    /**
     * Removes a previously added event handler from a DOM node.
     * @param {Node} node The DOM node to remove the event handler from.
     * @param {string} event The event name.
     * @param {Function} fn The event handler to remove.
     * @param {boolean} opt_useCapture If the event handler was added with this
     *     flag set to true, it should be set to true here in order to remove it.
     */
    function removeEvent(node, event, fn, opt_useCapture) {
      if (typeof node.removeEventListener == 'function') {
        node.removeEventListener(event, fn, opt_useCapture || false);
      }
      else if (typeof node.detatchEvent == 'function') {
        node.detatchEvent('on' + event, fn);
      }
    }
    
    
    /**
     * Returns the intersection between two rect objects.
     * @param {Object} rect1 The first rect.
     * @param {Object} rect2 The second rect.
     * @return {?Object} The intersection rect or undefined if no intersection
     *     is found.
     */
    function computeRectIntersection(rect1, rect2) {
      var top = Math.max(rect1.top, rect2.top);
      var bottom = Math.min(rect1.bottom, rect2.bottom);
      var left = Math.max(rect1.left, rect2.left);
      var right = Math.min(rect1.right, rect2.right);
      var width = right - left;
      var height = bottom - top;
    
      return (width >= 0 && height >= 0) && {
        top: top,
        bottom: bottom,
        left: left,
        right: right,
        width: width,
        height: height
      };
    }
    
    
    /**
     * Shims the native getBoundingClientRect for compatibility with older IE.
     * @param {Element} el The element whose bounding rect to get.
     * @return {Object} The (possibly shimmed) rect of the element.
     */
    function getBoundingClientRect(el) {
      var rect;
    
      try {
        rect = el.getBoundingClientRect();
      } catch (err) {
        // Ignore Windows 7 IE11 "Unspecified error"
        // https://github.com/w3c/IntersectionObserver/pull/205
      }
    
      if (!rect) return getEmptyRect();
    
      // Older IE
      if (!(rect.width && rect.height)) {
        rect = {
          top: rect.top,
          right: rect.right,
          bottom: rect.bottom,
          left: rect.left,
          width: rect.right - rect.left,
          height: rect.bottom - rect.top
        };
      }
      return rect;
    }
    
    
    /**
     * Returns an empty rect object. An empty rect is returned when an element
     * is not in the DOM.
     * @return {Object} The empty rect.
     */
    function getEmptyRect() {
      return {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0,
        width: 0,
        height: 0
      };
    }
    
    /**
     * Checks to see if a parent element contains a child elemnt (including inside
     * shadow DOM).
     * @param {Node} parent The parent element.
     * @param {Node} child The child element.
     * @return {boolean} True if the parent node contains the child node.
     */
    function containsDeep(parent, child) {
      var node = child;
      while (node) {
        if (node == parent) return true;
    
        node = getParentNode(node);
      }
      return false;
    }
    
    
    /**
     * Gets the parent node of an element or its host element if the parent node
     * is a shadow root.
     * @param {Node} node The node whose parent to get.
     * @return {Node|null} The parent node or null if no parent exists.
     */
    function getParentNode(node) {
      var parent = node.parentNode;
    
      if (parent && parent.nodeType == 11 && parent.host) {
        // If the parent is a shadow root, return the host element.
        return parent.host;
      }
      return parent;
    }
    
    
    // Exposes the constructors globally.
    window.IntersectionObserver = IntersectionObserver;
    window.IntersectionObserverEntry = IntersectionObserverEntry;
    
    }(window, document));
    
    /*!
     * rimg v2.1.0
     * (c) 2018 Pixel Union
     */
    (function (global, factory) {
    	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    	typeof define === 'function' && define.amd ? define(factory) :
    	(global.rimg = factory());
    }(this, (function () { 'use strict';
    
    /**
     * The default template render function. Turns a template string into an image
     * URL.
     *
     * @param {String} template
     * @param {Size} size
     * @returns {String}
     */
    function defaultTemplateRender(template, size) {
      return template.replace('{size}', size.width + 'x' + size.height);
    }
    
    /**
     * @type Settings
     */
    var defaults = {
      scale: 1,
      template: false,
      templateRender: defaultTemplateRender,
      max: { width: Infinity, height: Infinity },
      round: 32,
      placeholder: false
    };
    
    /**
     * Get a data attribute value from an element, with a default fallback and
     * sanitization step.
     *
     * @param {Element} el
     *
     * @param {String} name
     *        The data attribute name.
     *
     * @param {Object} options
     *        An object holding fallback values if the data attribute does not
     *        exist. If this object doesn't have the property, we further fallback
     *        to our defaults.
     *
     * @param {Function} [sanitize]
     *        A function to sanitize the data attribute value with.
     *
     * @returns {String|*}
     */
    function getData(el, name, options, sanitize) {
      var attr = 'data-rimg-' + name;
      if (!el.hasAttribute(attr)) return options[name] || defaults[name];
    
      var value = el.getAttribute(attr);
    
      return sanitize ? sanitize(value) : value;
    }
    
    /**
     * Sanitize data attributes that represent a size (in the form of `10x10`).
     *
     * @param {String} value
     * @returns {Object} An object with `width` and `height` properties.
     */
    function parseSize(value) {
      value = value.split('x');
      return { width: parseInt(value[0], 10), height: parseInt(value[1], 10) };
    }
    
    /**
     * Loads information about an element.
     *
     * Options can be set on the element itself using data attributes, or through
     * the `options` parameter. Data attributes take priority.
     *
     * @param {HTMLElement} el
     * @param {Settings} options
     * @returns {Item}
     */
    function parseItem(el) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    
      var isImage = el.hasAttribute('data-rimg-template');
    
      /**
       * @typedef {Settings} Item
       */
      return {
        el: el,
    
        // Type of element
        isImage: isImage,
        isBackgroundImage: isImage && el.tagName !== 'IMG',
    
        // Image scale
        scale: getData(el, 'scale', options),
    
        // Device density
        density: window.devicePixelRatio || 1,
    
        // Image template URL
        template: getData(el, 'template', options),
        templateRender: options.templateRender || defaults.templateRender,
    
        // Maximum image dimensions
        max: getData(el, 'max', options, parseSize),
    
        // Round image dimensions to the nearest multiple
        round: getData(el, 'round', options),
    
        // Placeholder image dimensions
        placeholder: getData(el, 'placeholder', options, parseSize)
      };
    }
    
    /**
     * Round to the nearest multiple.
     *
     * This is so we don't tax the image server too much.
     *
     * @param {Number} size The size, in pixels.
     * @param {Number} multiple The multiple to round to the nearest.
     * @returns {Number}
     */
    function roundSize(size, multiple) {
      return Math.ceil(size / multiple) * multiple;
    }
    
    /**
     * Get the size of an element.
     *
     * If it is too small, it's parent element is checked, and so on. This helps
     * avoid the situation where an element doesn't have a size yet or is positioned
     * out of the layout.
     *
     * @param {HTMLElement} el
     * @return {Object} size
     * @return {Number} size.width The width, in pixels.
     * @return {Number} size.height The height, in pixels.
     */
    function getElementSize(el) {
      var size = { width: 0, height: 0 };
    
      while (el) {
        size.width = el.offsetWidth;
        size.height = el.offsetHeight;
        if (size.width > 20 && size.height > 20) break;
        el = el.parentNode;
      }
    
      return size;
    }
    
    /**
     * Trigger a custom event.
     *
     * Note: this approach is deprecated, but still required to support older
     * browsers such as IE 10.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events
     *
     * @param {HTMLElement} el
     *        The element to trigger the event on.
     *
     * @param {String} name
     *        The event name.
     *
     * @returns {Boolean}
     *          True if the event was canceled.
     */
    function trigger(el, name) {
      var event = document.createEvent('Event');
      event.initEvent(name, true, true);
      return !el.dispatchEvent(event);
    }
    
    /**
     * Return the maximum supported density of the image, given the container.
     *
     * @param {Item} item
     * @param {Size} size
     */
    function supportedDensity(item, size) {
      return Math.min(Math.min(Math.max(item.max.width / size.width, 1), item.density), Math.min(Math.max(item.max.height / size.height, 1), item.density)).toFixed(2);
    }
    
    /**
     * Set the image URL on the element. Supports background images and `srcset`.
     *
     * @param {Item} item
     * @param {Size} size
     * @param {Boolean} isPlaceholder
     */
    function setImage(item, size, isPlaceholder, onLoad) {
      var render = item.templateRender;
      var density = isPlaceholder ? 1 : supportedDensity(item, size);
      var round = isPlaceholder ? 1 : item.round;
    
      var width = roundSize(size.width * density, round);
      var height = roundSize(size.height * density, round);
      var displaySize = width > item.max.width || height > item.max.height ? { width: item.max.width, height: item.max.height } : { width: width, height: height };
    
      var url = render(item.template, displaySize);
    
      // On load callback
      var image = new Image();
      image.onload = onLoad;
      image.src = url;
    
      // Set image
      if (item.isBackgroundImage) {
        item.el.style.backgroundImage = 'url(\'' + url + '\')';
      } else {
        item.el.setAttribute('srcset', url + ' ' + density + 'x');
      }
    }
    
    /**
     * Load the image, set loaded status, and trigger the load event.
     *
     * @fires rimg:load
     * @fires rimg:error
     * @param {Item} item
     * @param {Size} size
     */
    function loadFullImage(item, size) {
      var el = item.el;
    
      setImage(item, size, false, function (event) {
        if (event.type === 'load') {
          el.setAttribute('data-rimg', 'loaded');
        } else {
          el.setAttribute('data-rimg', 'error');
          trigger(el, 'rimg:error');
        }
    
        trigger(el, 'rimg:load');
      });
    }
    
    /**
     * Load in a responsive image.
     *
     * Sets the image's `srcset` attribute to the final image URLs, calculated based
     * on the actual size the image is being shown at.
     *
     * @fires rimg:loading
     *        The image URLs have been set and we are waiting for them to load.
     *
     * @fires rimg:loaded
     *        The final image has loaded.
     *
     * @fires rimg:error
     *        The final image failed loading.
     *
     * @param {Item} item
     */
    function loadImage(item) {
      var el = item.el;
    
      // Already loaded?
      var status = el.getAttribute('data-rimg');
      if (status === 'loading' || status === 'loaded') return;
    
      // Is the SVG loaded?
      if (!el.complete && !item.isBackgroundImage) {
        // Wait for the load event, then call load image
        el.addEventListener('load', function cb() {
          el.removeEventListener('load', cb);
          loadImage(item);
        });
    
        return;
      }
    
      // Trigger loading event, and stop if cancelled
      if (trigger(el, 'rimg:loading')) return;
    
      // Mark as loading
      el.setAttribute('data-rimg', 'loading');
    
      // Get element size. This is used as the ideal display size.
      var size = getElementSize(item.el);
    
      size.width *= item.scale;
      size.height *= item.scale;
    
      if (item.placeholder) {
        // Load a placeholder image first, followed by the full image. Force the
        // element to keep its dimensions while it loads. If the image is smaller
        // than the element size, use the image's size. Density is taken into account
        // for HiDPI devices to avoid blurry images.
        if (!item.isBackgroundImage) {
          el.setAttribute('width', Math.min(Math.floor(item.max.width / item.density), size.width));
          el.setAttribute('height', Math.min(Math.floor(item.max.height / item.density), size.height));
        }
    
        setImage(item, item.placeholder, true, function () {
          return loadFullImage(item, size);
        });
      } else {
        loadFullImage(item, size);
      }
    }
    
    /**
     * Prepare an element to be displayed on the screen.
     *
     * Images have special logic applied to them to swap out the different sources.
     *
     * @fires rimg:enter
     *        The element is entering the viewport.
     *
     * @param {HTMLElement} el
     * @param {Settings} options
     */
    function load(el, options) {
      if (!el) return;
      trigger(el, 'rimg:enter');
    
      var item = parseItem(el, options);
      if (item.isImage) {
        if (!item.isBackgroundImage) {
          el.setAttribute('data-rimg-template-svg', el.getAttribute('srcset'));
        }
    
        loadImage(item);
      }
    }
    
    /**
     * Prepare an element to be displayed on the screen.
     *
     * Images have special logic applied to them to swap out the different sources.
     *
     * @fires rimg:enter
     *        The element is entering the viewport.
     *
     * @param {HTMLElement} el
     * @param {Settings} options
     */
    function update(el, options) {
      if (!el) return;
      trigger(el, 'rimg:update');
    
      var item = parseItem(el, options);
    
      if (item.isImage) {
        if (!item.isBackgroundImage) {
          el.setAttribute('data-rimg', 'lazy');
          el.setAttribute('srcset', el.getAttribute('data-rimg-template-svg'));
        }
    
        loadImage(item);
      }
    }
    
    /**
     * @typedef {Object} Size
     * @property {Number} width
     * @property {Number} height
     */
    
    /**
     * A function to turn a template string into a URL.
     *
     * @callback TemplateRenderer
     * @param {String} template
     * @param {Size} size
     * @returns {String}
     */
    
    /**
     * @typedef {Object} Settings
     *
     * @property {String} [template]
     *           A template string used to generate URLs for an image. This allows us to
     *           dynamically load images with sizes to match the container's size.
     *
     * @property {TemplateRenderer} [templateRender]
     *           A function to turn a template string into a URL.
     *
     * @property {Size} [max]
     *           The maximum available size for the image. This ensures we don't
     *           try to load an image larger than is possible.
     *
     * @property {Number} [round]
     *           Round image dimensions to the nearest multiple. This is intended to
     *           tax the image server less by lowering the number of possible image
     *           sizes requested.
     *
     * @property {Size} [placeholder]
     *           The size of the lo-fi image to load before the full image.
     */
    
    /**
     * Initialize the responsive image handler.
     *
     * @param {String|HTMLElement|NodeList} selector
     *        The CSS selector, element, or elements to track for lazy-loading.
     *
     * @param {Settings} options
     *
     * @returns {PublicApi}
     */
    function rimg() {
      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-rimg="lazy"]';
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    
      // Intersections
      var io = new IntersectionObserver(function (entries) {
        entries.forEach(function (entry) {
          if (entry.isIntersecting || entry.intersectionRatio > 0) {
            io.unobserve(entry.target);
            load(entry.target, options);
          }
        });
      }, {
        // Watch the viewport, with 20% vertical margins
        rootMargin: '20% 0px'
      });
    
      /**
       * @typedef {Object} PublicApi
       */
      var api = {
        /**
         * Track a new selector, element, or nodelist for lazy-loading.
         * @type Function
         * @param {String|HTMLElement|NodeList} selector
         */
        track: function track() {
          var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-rimg="lazy"]';
    
          var els = querySelector(selector);
          for (var i = 0; i < els.length; i++) {
            io.observe(els[i]);
          }
        },
        update: function update$$1() {
          var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-rimg="loaded"]';
    
          var els = querySelector(selector);
          for (var i = 0; i < els.length; i++) {
            update(els[i], options);
          }
        },
    
    
        /**
         * Stop tracking element(s) for lazy-loading.
         * @type Function
         * @param {String|HTMLElement|NodeList} selector
         */
        untrack: function untrack() {
          var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-rimg]';
    
          var els = querySelector(selector);
          for (var i = 0; i < els.length; i++) {
            io.unobserve(els[i]);
          }
        },
    
    
        /**
         * Unload all event handlers and observers.
         * @type Function
         */
        unload: function unload() {
          io.disconnect();
        }
      };
    
      // Add initial elements
      api.track(selector);
    
      return api;
    }
    
    /**
     * Finds a group of elements on the page.
     *
     * @param {String|HTMLElement|NodeList} selector
     * @returns {Object} An array-like object.
     */
    function querySelector(selector) {
      if (typeof selector === 'string') {
        return document.querySelectorAll(selector);
      }
    
      if (selector instanceof HTMLElement) {
        return [selector];
      }
    
      if (selector instanceof NodeList) {
        return selector;
      }
    
      return [];
    }
    
    return rimg;
    
    })));
    
    /*!
     * rimg-shopify v2.2.0
     * (c) 2018 Pixel Union
     */
    (function (global, factory) {
    	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('rimg')) :
    	typeof define === 'function' && define.amd ? define(['rimg'], factory) :
    	(global.rimg = global.rimg || {}, global.rimg.shopify = factory(global.rimg));
    }(this, (function (rimg) { 'use strict';
    
    rimg = rimg && rimg.hasOwnProperty('default') ? rimg['default'] : rimg;
    
    /**
     * Polyfill for Element.matches().
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/matches
     */
    if (!Element.prototype.matches) {
      Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {
        var matches = (this.document || this.ownerDocument).querySelectorAll(s),
            i = matches.length;
        while (--i >= 0 && matches.item(i) !== this) {}
        return i > -1;
      };
    }
    
    var state = {
      init: init,
      watch: watch,
      unwatch: unwatch
    };
    
    function init() {
      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-rimg="lazy"]';
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    
      state.selector = selector;
      state.instance = rimg(selector, options);
      state.loadedWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    
      // Listen for Shopify theme editor events
      document.addEventListener('shopify:section:load', function (event) {
        return watch(event.target);
      });
    
      window.addEventListener('resize', function () {
        return _update();
      });
    
      document.addEventListener('shopify:section:unload', function (event) {
        return unwatch(event.target);
      });
    
      // Listen for custom events to allow themes to hook into rimg
      document.addEventListener('theme:rimg:watch', function (event) {
        return watch(event.target);
      });
    
      document.addEventListener('theme:rimg:unwatch', function (event) {
        return unwatch(event.target);
      });
    
      // Support custom events triggered through jQuery
      // See: https://github.com/jquery/jquery/issues/3347
      if (window.jQuery) {
        jQuery(document).on({
          'theme:rimg:watch': function themeRimgWatch(event) {
            return watch(event.target);
          },
          'theme:rimg:unwatch': function themeRimgUnwatch(event) {
            return unwatch(event.target);
          }
        });
      }
    }
    
    /**
     * Track an element, and its children.
     *
     * @param {HTMLElement} el
     */
    function watch(el) {
      // Track element
      if (typeof el.matches === 'function' && el.matches(state.selector)) {
        state.instance.track(el);
      }
    
      // Track element's children
      state.instance.track(el.querySelectorAll(state.selector));
    }
    
    /**
     * Untrack an element, and its children
     *
     * @param {HTMLElement} el
     * @private
     */
    function unwatch(el) {
      // Untrack element's children
      state.instance.untrack(el.querySelectorAll(state.selector));
    
      // Untrack element
      if (typeof el.matches === 'function' && el.matches(state.selector)) {
        state.instance.untrack(el);
      }
    }
    
    /**
     * Update an element, and its children.
     *
     * @param {HTMLElement} el
     */
    function _update() {
      var currentWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    
      // Return if we're not 2x smaller, or larger than the existing loading size
      if (currentWidth / state.loadedWidth > 0.5 && currentWidth / state.loadedWidth < 2) {
        return;
      }
    
      state.loadedWidth = currentWidth;
      state.instance.update();
    }
    
    return state;
    
    })));
    
    !function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],t):e.PxsMap=t(e.$)}(this,function(e){"use strict";e=e&&e.hasOwnProperty("default")?e.default:e;var t=function(e,t,o,i){var s,r,a;return function(){if(a=this,r=Array.prototype.slice.call(arguments),!s||!o&&!i){if(!o)return l(),s=setTimeout(function(){l(),e.apply(a,r)},t);s=setTimeout(l,t),e.apply(a,r)}function l(){clearTimeout(s),s=null}}};var o=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},i=function(){function e(e,t){for(var o=0;o<t.length;o++){var i=t[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,o,i){return o&&e(t.prototype,o),i&&e(t,i),t}}();return function(){function s(t){var i=this;o(this,s),this.$el=e("[data-map]",t.el),this.settings=t.data,this.map=null,this.center=null,this.$container=e("[data-map-container]",this.$el),this.zoom=11+parseInt(this.settings.zoom,10),isNaN(this.zoom)&&(this.zoom=13),this.colors=null,this.settings.colors&&(this.colors=this.settings.colors),this.resize=this.resize.bind(this),this.address=this.settings.address,this.apiKey=this.settings.api_key,this.apiKey&&(void 0===window.googleMaps?(window.googleMaps=!0,e.getScript("https://maps.googleapis.com/maps/api/js?key="+this.apiKey).done(function(){i._createMap()}).fail(function(e){console.error(e)})):this._createMap())}return i(s,[{key:"_createMap",value:function(){var e=this;return this.geolocate().done(function(o){e.map=new google.maps.Map(e.$container.get(0),{center:o[0].geometry.location,clickableIcons:!1,disableDefaultUI:!0,disableDoubleClickZoom:!0,gestureHandling:"none",keyboardShortcuts:!1,maxZoom:e.zoom,minZoom:e.zoom,scrollWheel:!1,styles:e._getMapStyles(),zoom:e.zoom,zoomControl:!1}),e.center=e.map.getCenter(),e.map.panBy(0,0),new google.maps.Marker({clickable:!1,map:e.map,position:e.center}),google.maps.event.addDomListener(window,"resize",t(e.resize,250,!0,!0))}).fail(function(t){var o="https://developers.google.com/maps/faq#usagelimits",i=void 0;switch(t){case"ZERO_RESULTS":i="<p>Unable to find the address:</p> "+e.address;break;case"OVER_QUERY_LIMIT":i='\n              <p>Unable to load Google Maps, you have reached your usage limit.</p>\n              <p>\n                Please visit\n                <a href="'+o+'" target="_blank">'+o+"</a>\n                for more details.\n              </p>\n            ";break;default:i="Unable to load Google Maps."}e.displayErrorInThemeEditor(i,t)})}},{key:"geolocate",value:function(){var t=e.Deferred();return(new google.maps.Geocoder).geocode({address:this.address},function(e,o){o!==google.maps.GeocoderStatus.OK&&t.reject(o),t.resolve(e)}),t}},{key:"resize",value:function(){this.map&&(google.maps.event.trigger(this.map,"resize"),this.map.setCenter(this.center),this.map.panBy(0,100))}},{key:"onSectionUnload",value:function(){this.map&&google.maps.event.clearListeners(this.map,"resize")}},{key:"_getMapStyles",value:function(){if(this.colors)return[{elementType:"geometry",stylers:[{color:this.colors.e}]},{elementType:"labels.icon",stylers:[{visibility:"off"}]},{elementType:"labels.text.fill",stylers:[{color:this.colors.a}]},{elementType:"labels.text.stroke",stylers:[{color:this.colors.e}]},{featureType:"administrative",elementType:"geometry",stylers:[{visibility:"off"}]},{featureType:"administrative.country",stylers:[{visibility:"off"}]},{featureType:"administrative.land_parcel",stylers:[{visibility:"off"}]},{featureType:"administrative.neighborhood",stylers:[{visibility:"off"}]},{featureType:"administrative.locality",stylers:[{visibility:"off"}]},{featureType:"poi",stylers:[{visibility:"off"}]},{featureType:"road",elementType:"geometry.fill",stylers:[{color:this.colors.d}]},{featureType:"road",elementType:"labels.icon",stylers:[{visibility:"off"}]},{featureType:"road.arterial",elementType:"geometry",stylers:[{color:this.colors.c}]},{featureType:"road.highway",elementType:"geometry",stylers:[{color:this.colors.b}]},{featureType:"road.highway.controlled_access",stylers:[{visibility:"off"}]},{featureType:"road.local",elementType:"labels.text.fill",stylers:[{color:this.colors.b}]},{featureType:"road.local",elementType:"labels.text.stroke",stylers:[{color:this.colors.e}]},{featureType:"transit",stylers:[{visibility:"off"}]},{featureType:"water",elementType:"geometry",stylers:[{color:this.colors.f}]}]}},{key:"displayErrorInThemeEditor",value:function(e){window.Shopify&&window.Shopify.designMode&&this.$container.html('<div class="map-error-message">'+e+"</div>")}}]),s}()});
;

window.ThemeView = (function(superClass) {
  extend(ThemeView, superClass);

  function ThemeView() {
    return ThemeView.__super__.constructor.apply(this, arguments);
  }

  ThemeView.prototype.el = document.body;

  ThemeView.prototype.events = {
    'submit .contact-form': 'spamCheck'
  };

  ThemeView.prototype.initialize = function() {
    var body;
    $.when($.ready).then(function() {
      return $(document.documentElement).removeClass("loading");
    });
    body = $(document.body);
    this.isHome = body.hasClass("template-index");
    this.isCollection = body.hasClass("template-collection");
    this.isListCollections = body.hasClass("template-list-collections");
    this.isProduct = body.hasClass("template-product");
    this.isCart = body.hasClass("template-cart");
    this.isPage = body.hasClass("template-page");
    this.isBlog = body.hasClass("template-blog");
    this.isArticle = body.hasClass("template-article");
    this.isAccount = body.attr("class").indexOf("-customers-") > 0;
    this.is404 = body.hasClass("template-404");
    this.isSearch = body.hasClass("template-search");
    this.isPasswordPage = body.hasClass("template-password");
    this.isGiftCardPage = body.hasClass("gift-card-template");
    this.sectionBinding();
    return $(window).on('dragStart', function(event) {
      var $flickityEnabledEl, $target, flickity;
      $target = $(event.target);
      $flickityEnabledEl = $target.closest('.flickity-enabled');
      if (!$flickityEnabledEl.length) {
        return;
      }
      flickity = Flickity.data($flickityEnabledEl[0]);
      return window.removeEventListener('scroll', flickity);
    });
  };

  ThemeView.prototype.render = function() {
    var i, j, l, len, len1, len2, productItem, ref, ref1, ref2, rte, select;
    if (Theme.currencySwitcher) {
      this.currencyView = new CurrencyView({
        el: this.$(".currency-switcher")
      });
      this.$(".currency-switcher").trigger('switch-currency');
    }
    if (this.isHome) {
      new HomeView({
        el: this.$el
      });
    }
    if (this.isAccount) {
      new AccountView({
        el: this.$el
      });
    }
    if (this.is404) {
      new NotFoundView({
        el: this.$el
      });
    }
    if (this.isPasswordPage) {
      new PasswordView();
    }
    if (this.isGiftCardPage) {
      new GiftCardView();
    }
    if (!this.isProduct) {
      ref = $(".rte");
      for (i = 0, len = ref.length; i < len; i++) {
        rte = ref[i];
        new RTEView({
          el: rte
        });
      }
      ref1 = $("select");
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        select = ref1[j];
        new SelectView({
          el: select
        });
      }
    }
    if (!this.isHome) {
      ref2 = $(".product-list-item");
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        productItem = ref2[l];
        new ProductListItemView({
          el: productItem
        });
      }
    }
    rimg.shopify.init();
    if ($("html").hasClass("lt-ie10")) {
      return this.inputPlaceholderFix();
    }
  };

  ThemeView.prototype.sectionBinding = function() {
    this.sections = new ThemeEditor();
    this.sections.register('header', this.header(this.sections));
    this.sections.register('pxs-map', this.map(this.sections));
    if (this.isListCollections) {
      this.sections.register('collections-list', this.listCollections(this.sections));
    }
    if (this.isCollection) {
      this.sections.register('collection', this.collection(this.sections));
    }
    if (this.isBlog) {
      new BlogViewHandler(this.$el);
    }
    if (this.isArticle) {
      this.sections.register('article', this.article(this.sections));
    }
    if (this.isCart) {
      this.sections.register('cart', this.cart(this.sections));
    }
    this.sections.register('product', this.product(this.sections));
    this.sections.register('featured-product', this.product(this.sections));
    $(document).on('shopify:section:load', (function(_this) {
      return function() {
        if (_this.currencyView) {
          _this.currencyView.unload();
          _this.currencyView = null;
        }
        if (Theme.currencySwitcher) {
          _this.currencyView = new CurrencyView({
            el: _this.$(".currency-switcher")
          });
          return _this.$(".currency-switcher").trigger('switch-currency');
        }
      };
    })(this));
    return $(document).on('shopify:section:unload', (function(_this) {
      return function() {
        if (_this.currencyView) {
          _this.currencyView.unload();
          return _this.currencyView = null;
        }
      };
    })(this));
  };

  ThemeView.prototype.header = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new HeaderView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionDeselect: function(event) {
        var instance;
        instance = sections.getInstance(event);
        return this.instances[instance.sectionId].onSectionDeselect();
      },
      onSectionUnload: function(event) {
        var instance;
        instance = sections.getInstance(event);
        this.instances[instance.sectionId].unload();
        return delete this.instances[instance.sectionId];
      }
    };
  };

  ThemeView.prototype.map = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new PxsMap({
          el: instance.el,
          data: instance.data
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionDeselect: function(event) {
        var instance;
        instance = sections.getInstance(event);
        return this.instances[instance.sectionId].onSectionDeselect();
      },
      onSectionUnload: function(event) {
        var instance;
        instance = sections.getInstance(event);
        this.instances[instance.sectionId].onSectionUnload();
        return delete this.instances[instance.sectionId];
      }
    };
  };

  ThemeView.prototype.listCollections = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new ListCollections(instance.$container);
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionUnload: function(event) {
        var instance;
        instance = sections.getInstance(event);
        this.instances[instance.sectionId].onSectionUnload();
        return delete this.instances[instance.sectionId];
      }
    };
  };

  ThemeView.prototype.collection = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new CollectionView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionUnload: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        this.instances[instance.sectionId].onSectionUnload();
        if ((ref = this.instances[instance.sectionId]) != null) {
          ref.remove();
        }
        return delete this.instances[instance.sectionId];
      }
    };
  };

  ThemeView.prototype.article = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new ArticleView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionSelect: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        return (ref = this.instances[instance.sectionId]) != null ? ref.update(instance.$container) : void 0;
      },
      onSectionDeselect: function(event) {
        return this.onSectionSelect(event);
      },
      onSectionUnload: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        if ((ref = this.instances[instance.sectionId]) != null) {
          ref.remove();
        }
        return delete this.instances[instance.sectionId];
      }
    };
  };

  ThemeView.prototype.cart = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new CartView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionSelect: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        return (ref = this.instances[instance.sectionId]) != null ? ref.update(instance.$container) : void 0;
      },
      onSectionDeselect: function(event) {
        return this.onSectionSelect(event);
      },
      onSectionUnload: function(event) {
        var instance, ref;
        instance = sections.getInstance(event);
        if ((ref = this.instances[instance.sectionId]) != null) {
          ref.remove();
        }
        return delete this.instances[instance.sectionId];
      }
    };
  };

  ThemeView.prototype.product = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new ProductSection(instance.el, instance.data);
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionUnload: function(event) {
        var instance;
        instance = sections.getInstance(event);
        this.instances[instance.sectionId].onSectionUnload();
        return delete this.instances[instance.sectionId];
      }
    };
  };

  ThemeView.prototype.inputPlaceholderFix = function() {
    var i, input, len, placeholders, text;
    placeholders = $("[placeholder]");
    for (i = 0, len = placeholders.length; i < len; i++) {
      input = placeholders[i];
      input = $(input);
      if (!(input.val().length > 0)) {
        text = input.attr("placeholder");
        input.attr("value", text);
        input.data("original-text", text);
      }
    }
    placeholders.focus(function() {
      input = $(this);
      if (input.val() === input.data("original-text")) {
        return input.val('');
      }
    });
    return placeholders.blur(function() {
      input = $(this);
      if (input.val().length === 0) {
        return input.val(input.data("original-text"));
      }
    });
  };

  ThemeView.prototype.spamCheck = function(e) {
    if (this.$(e.target).find('.comment-check').val().length > 0) {
      return e.preventDefault();
    }
  };

  return ThemeView;

})(Backbone.View);

$(function() {
  window.theme = new ThemeView();
  return theme.render();
});
